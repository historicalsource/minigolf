;	26-AUG-78
;	16:45
	.TITLE GFWPLY: MINI-GOLF PLAYFIELD UPDATE ROUTINES
	.GLOBL EMSG,MSG,CVD,R0,R1,R2,R3,R4,LNG

	.MACRO ADD OP
	CLC
	ADC OP
	.ENDM

	.MACRO SUB OP
	SEC
	SBC OP
	.ENDM

	.MACRO GENS OP
	.IRP Z,<OP>
	.MACRO Z'S COUNT,LAB
	.REPT COUNT
	Z LAB
	.ENDR
	.ENDM
	.ENDR
	.ENDM

	GENS <ASL,LSR,ROL,ROR,INX,DEX,INY,DEY,INC,DEC>

	.RADIX 16
	.CSECT GFWPLY
	.PAGE
	.SBTTL MESSAGE WRITE
;
;THIS ROUTINE WILL WRITE A MESSAGE HORIZONTAL ON THE SCREEN.  THE MESSAGE
;IS SELECTED BY THE CONTENTS OF THE Y-REGISTER.
;
;AT ENTRY:
;CARRY =0 FOR BLACK MESSAGE; CARRY =1 FOR WHITE MESSAGE
;Y = MESSAGE #
;LNG,LNG+1 MUST CONTAIN THE ADDRESS OF THE MESSAGES

;AT EXIT:
;A,X,Y,R0,R1,R2,R3,R4 DESTROYED. (CC: EQUAL =1, N=0)
;
;
	.ENABL LSB
EMSG:	LDA I,80	;ERASE MODE REQUEST ENTER HERE
	BMI 6$		; (ALWAYS)
MSG:	LDA I,0		;NORMAL ENTRY
6$:	ROR		;SAVE CARRY FOR COLOR SELECT
	STA R4
	LDA NY,LNG
	STA R0
	INY
	LDA NY,LNG
	STA R1		;R0,R1 => ADDRESS OF MESSAGE IN TABLE
	LDY I,0
	LDX I,0
3$:	LDA NY,R0	;GET DATA. WHAT IS IT?
	BEQ 1$		;END.
	BPL 2$		;ASCII.
	AND I,7F	;ADDRESS. MASK UPPER BIT OUT
	STA R3		;MSB'S GO TO R3
	INY
	LDA NY,R0
	STA R2		;LSB'S GO TO R2
4$:	INY
	BNE 3$		;(ALWAYS)
2$:	ORA R4		;PUT IN THE COLOR BIT (IF ANY)
	BIT R4		;WHAT ARE WE DOING?
	BVC 5$		;NORMAL STUFF
	LDA I,0		;ERASE. USE A SPACE
5$:	STA NX,R2	;TO THE SCREEN
	CLC
	LDA R2
	ADC I,20	;GOOFY HARDWARE REQUIRES HORIZONTAL WRITE
	STA R2
	BCC 4$
	INC R3
	BNE 4$		;(ALWAYS)
1$:	RTS
	.DSABL LSB
	.PAGE
;THIS ROUTINE CONVERTS THE BINARY NUMBER IN 'A' (0-255) TO BCD ASCII

;AT ENTRY:
;A = BINARY NUMBER TO BE CONVERTED
;R2,R3 = PLYFLD ADDRESS OF DESTINATION
;R4 BIT 7 = COLOR (0 FOR BLACK; 1 FOR WHITE)

;AT EXIT:
;A=0; X,Y,R0,R1 DESTROYED; R2,R3,R4 UNDISTURBED

CVD:	PHA		;PUT NUMBER TO STACK
	LDA I,0
	TAY		;Y IS TO BE ACCUMULATOR
	STA R1		;(DOUBLE PRECISION)
	PHA		;CONVERTER OVERFLOW SPACE
	LDX I,0
	BIT R4		;BLANK MODE?
	BVS 8$		;YES. DO RIPPLE BLANKING FOR 3 DIGITS
	LDA I,1		;CONVERTER STARTS AT 1
	STA R0
	TSX		;POINT TO DATA
	SED		;THIS ROUTINE RUNS ENTIRELY IN BCD MODE
	BNE 1$		;(ALWAYS)
3$:	TYA		;ACCUMULATE
	ADD R0		; THE 1'S AND 10'S
	TAY
	LDA R1
	ADC ZX,1	; AND 100'S
	STA R1
2$:	LDA R0		;ADJUST CONVERTER
	ADD R0		; 1'S AND 10'S
	STA R0
	LDA ZX,1	; 100'S
	ADC ZX,1
	STA ZX,1
1$:	ROR ZX,2	;REQUEST BIT SET?
	BCS 3$		;YES
	BNE 2$		;NO BUT THE REGISTER ISN'T EMPTY
	STY R0		;SAVE ACCUMULATOR LOW BITS
	CLD		;BACK TO BINARY MODE
	LDX I,0		;PREPARE TO PRINT. START WITH MSB'S
	CLC		;RIPPLE BLANK FLAG.
	LDA R1		;ANY 100'S?
	BEQ 4$		;NOPE. DON'T PRINT ANYTHING
	SEC		;STOP THE RIPPLE BLANK
	ORA I,'0	;ASCIFY DATA
	ORA R4		;ADD COLOR
	LDY AX,PSPC	;GET INDEX
	INX		;BUMP TO NEXT SPOT
	STA NY,R2	;PRINT IT
4$:	LDA R0		;GET MIDDLE BITS
	BCS 5$		;DON'T BLANK THEM
	AND I,0F0	;MIDDLE # = 0?
	BEQ 6$		;YEP. DON'T PRINT ANYTHING
5$:	LSRS 4
	ORA I,'0	;ASCIFY IT
	ORA R4		;ADD IN COLOR
	LDY AX,PSPC	;GET INDEX
	INX		;BUMP TO NEXT SPACE
	STA NY,R2	;PRINT IT
6$:	LDA R0		;GET LSB'S
	AND I,0F
	ORA I,'0	;ASCIFY IT
	ORA R4		;ADD COLOR
	LDY AX,PSPC	;GET INDEX
	INX		;BUMP IT
	STA NY,R2	;PRINT IT
8$:	LDA I,0		;BLANK
	CPX I,3		;DONE?
	BCS 7$		;YEP
	LDY AX,PSPC	;GET INDEX
	INX
	STA NY,R2	;BLANK UNUSED PLACES
	BNE 8$		;(ALWAYS)
7$:	PLA		;PURGE STACK
	PLA
	RTS

PSPC:	.BYTE 0,20,40
	.PAGE
	.SBTTL MOVING BARRIER
	.GLOBL BARIER,FRMCNT,BARRL,BARRH,CPPLYA,SLDTST,XPOS,YPOS,DIRECT
	.GLOBL STRTER,B.BSTR,B.BMOV,PLAYER

;
;BARRIER SUBROUTINE
;THIS ROUTINE MOVES THE VERTICAL OBSTICLE.
;THIS OBSTICLE IS 16 LINES LONG AND MOVES
;OVER 8 STAMPS, STARTING AT THE
;ADDRESS STORED AT BARRL & BARRH.
;THIS ROUTINE IS CALLED BY VBLANK.
;
	.CSECT COLLIS
BARIER: LDA FRMCNT
	BPL 1$
	EOR I,0FF
1$:	LSR
	STA R4			;SAVE STAMP TYPE
	LSRS 3			;COMPUTE STAMP LOCATION
	TAX			;(ALWAYS < 8)
	LDA I,98		;INVISIBLE BARRIER
	LDY I,0
3$:	STA NY,BARRL		;CLEAR MOVING OBSTICLE
	INY
	CPY I,0A
	BCC 3$
	TXA
	TAY
	LDA R4			;GET STAMP #
	AND I,7			;MASK TO 3 BITS
	ORA I,90		;MAKE A BARRIER PIX
	STA NY,BARRL		;WRITE BOTTOM STAMP
	INY
	INY
	EOR I,8			;SWITCH TO OTHER PIX
	STA NY,BARRL		;WRITE TOP STAMP
	DEY
	LDA I,90
	STA NY,BARRL		;WRITE MIDDLE STAMP
	LDX I,0
	LDA I,B.BMOV
	BIT PLAYER		;BALL IN MOTION?
	BNE 2$			;YES
	BIT STRTER		;WHITE UP?
	BVS 2$			;NO. USE XPOS.
	LDX I,8.		;'PNTRX,PNTRY'
2$:	JSR TSTBAL		;GO TEST WHITE BALL
	LDX I,4
	LDA I,B.BMOV
	BIT PLAYER		;BALL IN MOTION?
	BNE 5$			;YEP. USE XPOS
	LDA I,B.BSTR		;BLACK UP?
	BIT STRTER		;BLACK UP?
	BEQ 4$			;NO. NOT STARTED
	BVC 5$			;NOT UP
	LDX I,8			;'PNTRX,PNTRY'
5$:	JSR TSTBAL		;GO TEST BLACK BALL
4$:	RTS
TSTBAL:	JSR CPPLYA		;COMPUTE BALL'S POSITION
	LDA R0
	ASL
	STA R4			;KEEP PIX #
	LDA R1
	ROL
	ASL R4
	ROL
	ASL R4
	ROL
	AND I,31.		;ISOLATE X CO-ORDINATE
	TAY			;SAVE IT
	INY			;BOOT IT RIGHT 1 SPACE
	LDA BARRL
	ASL
	STA R4
	LDA BARRH
	ROL
	ASL R4
	ROL
	ASL R4
	ROL
	AND I,31.
	STA R4
	CPY R4			;ARE WE ON X?
	BEQ 1$			;YEP
2$:	RTS			;NO PROBLEM
1$:	LDY I,21
	LDA NY,R0		;GET STAMP
	CMP I,98		;BLANK?
	BEQ 2$			;YES
	CMP #90			;SOLID?
	BNE 12$			;NOPE
	BIT FRMCNT		;MOVING?
	BPL 13$			;UP
	BMI 14$			;DOWN
12$:	AND I,0F0		;BARRIER AT ALL?
	CMP I,90
	BNE 2$			;NO
	LDA NY,R0		;RETRIEVE DATA
	AND I,0F
	STA R4
	AND I,8			;UPPER?
	BNE 3$			;YES.
	LDA R3			;LOWER, GET Y OFFSET
	CMP R4			;MATCH PIX #?
	BCC 2$			;NO. ITS A MISS
14$:	LDA R3			;IS Y 0?
	BNE 4$			;NO. ITS OK TO MOVE IT
	LDY I,20		;WILL WE MOVE INTO A SOLID?
	JSR SLDTST		;IS IT A SOLID
	BCC 4$			;NO. OK TO MOVE
9$:	LDA DIRECT		;WHICH WAY SHOULD WE GO?
	ADC I,0F		;ADD 90 DEGREES
	LDY I,41
	AND I,20
	BEQ 5$			;MOVE RIGHT
	LDY I,1			;MOVE LEFT
5$:	JSR SLDTST		;TEST
	BCC 6$			;OK TO MOVE
	TYA
	EOR I,40		;GO THE OTHER WAY
	TAY
6$:	LDA I,8
	CPY I,41
	BEQ 7$
	LDA I,-1
7$:	ADD XPOS+1(X)		;MOVE BALL
	SUB R2			;SUBTRACT X OFFSET
	STA ZX,XPOS+1
8$:	RTS			;DONE
4$:	DEC ZX,YPOS+1		;MOVE DOWN 2 SPACES
15$:	JMP TSTBAL		;RE-ITERATE
3$:	EOR R4			;UPPER, GET PIX #
	CMP R3			;MATCH Y OFFSET?
	BCC 8$			;NOPE. ITS A MISS
13$:	LDA R3			;IS Y A 7?
	CMP I,7
	BCS 10$			;YES. TROUBLE
11$:	INC ZX,YPOS+1		;MOVE UP 1 SPACE
	BNE 15$			;(ALWAYS)
10$:	LDY I,22		;LOOK ABOVE.
	JSR SLDTST		;WHAT ARE WE RUNNING INTO?
	BCC 11$			;A SPACE. ITS OK TO MOVE THERE
	BCS 9$			;A SOLID. WE HAVE TO MOVE SIDEWAYS

	.GLOBL CHKS4K
CHKS4K:	.BYTE 55		;CHECKSUM 3000-33FF
	.PAGE
	.PAGE
	.SBTTL MESSAGES
;
;MESSAGES
;
	.CSECT GFWPLY
	.RADIX 10
	
	
$MAXMSG	=19		;TOTAL # OF MESSAGES. IMPORTANT!!!!
	
	
	.REPT 0
THE MESSAGES ARE STORED AS ASCII STRINGS PRECEEDED BY A 2 BYTE ADDRESS
AND TERMINATED BY A 0.  THE ADDRESS IS DISTINGUISHED FROM ASCII BY THE
FACT THAT THE MSB OF THE MS BYTE (BIT 15) IS SET AND INDICATES WHERE IN
THE 32K ADDRESS SPACE TO PUT THE ASCII STRING.

MESSAGE SELECTION IS ACCOMPLISHED BY WAY OF 2 POINTERS.  EACH MESSAGE HAS
AN ID NUMBER BETWEEN 0 AND $MAXMSG.  THIS ID NUMBER IS USED AS AN INDEX
INTO AN OFFSET TABLE (MST).  THIS OFFSET, WHEN DOUBLED, IS ADDED TO
'MSGS' TO OBTAIN THE ADDRESS OF THE STRING.  THERE ARE 4 OFFSET TABLES,
ONE FOR EACH OF THE 4 LANGUAGES.  THE 'CLEAR' ROUTINE DETERMINES WHAT
LANGUAGE TO USE AND SETS THE ADDRESS OF THE CORRECT OFFSET TABLE INTO
LNG AND LNG+1.
	.ENDR
	.PAGE
	.GLOBL MSTA,RAMBAD
PLYFLD	=^H0800
..MSGN	=0

	.MACRO MSTOFS	OP
	.IRP X,<OP>
	.GLOBL X
X	=..MSGN		;MESSAGE #
..MSGN	=..MSGN+2
	.IF LT,$MAXMSG-<..MSGN/2>
	.ERROR $MAXMSG	;MAXMSG TOO SMALL!!!!!!!
	.IFF
	.=MST+X
	.IRP Z,<$E,$F,$S,$G>	;FOUR LANGUAGES
	.WORD Z''X
	.=.+<$MAXMSG*2>-2
	.ENDR
	.ENDC
	.ENDR
	.ENDM

	.MACRO BFILL
	.ENDM

;THE FOLLOWING MACRO CALL CREATES ENTRIES IN EACH OF THE 4
;OFFSET TABLES

MST:	MSTOFS <WELL,MEDIUM,POOR>	;MUST BE FIRST!!!
	MSTOFS <WHITE,BLACK,LOST,GMEOVR,CORSE>	;	
	MSTOFS <CREDIT,ROMERR,ROMOK,SELFT,LANGM>
	MSTOFS <WRN1,WRN2,REM1,REM2,BONUS,PARR>
	.=MST+<$MAXMSG*8>	;SKIP OVER MST

MSTA:	.WORD MST+<$MAXMSG*0>	;ENGLISH
	.WORD MST+<$MAXMSG*2>	;FRENCH
	.WORD MST+<$MAXMSG*4>	;SPANISH
	.WORD MST+<$MAXMSG*6>	;GERMAN
	.ENABL M68		;ADDRESSES GET STORED REVERSED
	.CSECT ASCII
MSGS:
$EGMEO:	.WORD PLYFLD+288+31+32768
	.ASCII /GAME@OVER/
	.WORD PLYFLD+256+32768
	.ASCIZ /INSERT@COIN/
	BFILL
$FLOST:	.WORD PLYFLD+288+31+32768
	.ASCIZ /TROP@LENT/
	BFILL
$SLOST:	.WORD PLYFLD+32768+288+31
	.ASCIZ /MUY@LENTO/
	BFILL
$GLOST:	.WORD PLYFLD+32768+320+31
	.ASCIZ /ZU@LANGE/
	BFILL
$ELOST:	.WORD PLYFLD+320+31+32768
	.ASCIZ /TOO@LONG/
	BFILL
$ECRED:	.WORD PLYFLD+288+31+32768
	.ASCIZ /PUSH@START/
	BFILL
$FREM1:	.WORD PLYFLD+320+32768
	.ASCII /COUPS@RESTANT/
$FREM2:	.WORD PLYFLD+32768+192
	.BYTE 0
	BFILL
$SREM1:	.WORD PLYFLD+32768+192
	.ASCII /QUEDIAN/
	.WORD PLYFLD+32768+544
	.ASCII /GOLPES/
$SREM2:	.WORD PLYFLD+32768+448
	.BYTE 0
	BFILL
$GREM1:	.WORD PLYFLD+32768+192
	.ASCII /NOCH/
	.WORD PLYFLD+32768+448
	.ASCII /SCHLAGE/
$GREM2:	.WORD PLYFLD+32768+352
	.BYTE 0
	BFILL
$EREM1:	.WORD PLYFLD+352+32768
	.ASCII /SHOTS@LEFT/
$EREM2:	.WORD PLYFLD+224+32768
	.BYTE 0
	BFILL
$EWHIT:	.WORD PLYFLD+32+32768+30
	.ASCIZ /WHITE/
	BFILL
$EBLAC:	.WORD PLYFLD+608+32768+30
	.ASCIZ /BLACK/
	BFILL
$FGMEO: .WORD PLYFLD+256+31+32768
	.ASCII	/FIN@DE@PARTIE/
	.WORD PLYFLD+160+32768
	.ASCIZ /INTRODUIRE@1@PIECE/
	BFILL
$SGMEO:	.WORD PLYFLD+256+31+32768
	.ASCII	/FIN@PARTIDA/
	.WORD PLYFLD+160+32768
	.ASCIZ /INTRODUCIR@MONEDA/
	BFILL
$GGMEO:	.WORD PLYFLD+288+31+32768
	.ASCII	/SPIELENDE/
	.WORD PLYFLD+192+32768
	.ASCIZ /MUENZE@EINWERFEN/
	BFILL
$FCRED:	.WORD PLYFLD+224+31+32768
	.ASCIZ	/APPUYER@START/
	BFILL
$SCRED:	.WORD PLYFLD+256+31+32768
	.ASCIZ	/PULSAR@START/
	BFILL
$GCRED:	.WORD PLYFLD+256+31+32768
	.ASCIZ	/DRUCKE@START/
	BFILL
$FWHIT:	.WORD PLYFLD+32+32768+30
	.ASCIZ	/BLANC/
	BFILL
$SWHIT:	.WORD PLYFLD+32768+30
	.ASCIZ	/BLANCO/
	BFILL
$GWHIT:	.WORD PLYFLD+32+32768+30
	.ASCIZ	/WEISS/
	BFILL
$FBLAC:	.WORD PLYFLD+608+32768+30
	.ASCIZ	/NOIR/
	BFILL
$SBLAC: .WORD PLYFLD+576+32768+30
	.ASCIZ	/NEGRO/
	BFILL
$GBLAC:	.WORD PLYFLD+544+32768+30
	.ASCIZ	/SCHWARZ/
	BFILL
$ELANG:	.WORD PLYFLD+128+16+32768
	.ASCIZ	/ENGLISH/
	BFILL
$FLANG:	.WORD PLYFLD+128+16+32768
	.ASCIZ	/FRANCAIS/
	BFILL
$SLANG:	.WORD PLYFLD+128+16+32768
	.ASCIZ	/ESPANOL/
	BFILL
$GLANG:	.WORD PLYFLD+128+16+32768
	.ASCIZ	/DEUTSCH/
	BFILL
$FCORS:
$GCORS:
$ECORS:	.WORD PLYFLD+288+31+32768
	.ASCIZ /COURSE@/
	BFILL
$SCORS:	.WORD PLYFLD+32768+31+288
	.ASCIZ /VUELTA@/
	BFILL
$FBONU:
$SBONU:
$GBONU:
$EBONU:	.WORD PLYFLD+384+31+32768
	.ASCIZ /BONUS/
	BFILL
$GPARR:	.WORD PLYFLD+32768+320+30
	.ASCIZ	/PAR@/
	BFILL
$FPARR:
$SPARR:
$EPARR:	.WORD PLYFLD+352+32768+30
	.ASCIZ /PAR@/
	BFILL
$GWRN1:	.WORD PLYFLD+32768+320+18
	.ASCIZ /ACHTUNG/
	BFILL
$FWRN1:
$SWRN1:
$EWRN1:	.WORD PLYFLD+32768+320+16
	.ASCIZ /SPECIAL/
	BFILL
$GWRN2:	.WORD PLYFLD+32768+192+16
	.ASCII /LETZTE@SCHUESSE/
	.WORD PLYFLD+32768+64+14
	.ASCII /WEITER@MUENZEN@EINWERFEN/
	.WORD PLYFLD+32768+64+12
	.ASCII /FUER/
	.WORD PLYFLD+32768+352+12
	.ASCII /WEITERE@BAELLE/
	.WORD PLYFLD+32768+320+10
	.ASCIZ	/+@5@EXTRA/
	.WORD PLYFLD+32768+256+12
	.BYTE 0
$FWRN2:
$SWRN2:
$EWRN2:	.WORD PLYFLD+32768+320+20
	.ASCII /WARNING/
	.WORD PLYFLD+32768+192+18
	.ASCII /GAME@ALMOST@OVER/
	.WORD PLYFLD+32768+160+14
	.ASCII /COIN@INSERTED@NOW/
	.WORD PLYFLD+32768+64+12
	.ASCII /GIVES/
	.WORD PLYFLD+32768+352+12
	.ASCII	/SHOTS@+@5@EXTRA/
	.WORD PLYFLD+32768+256+12
	.BYTE 0
$FWELL:
$EWELL:	.ASCIZ /PRO/
$SWELL:	.ASCIZ /EXPERTO/
$GWELL:	.ASCIZ /PROFI/
$FMEDI:	.ASCIZ /BIEN/
$EMEDI:	.ASCIZ /AMATUER/
$SMEDI:	.ASCIZ /REGULAR/
$GMEDI:	.ASCIZ /ANFANGER/
$FPOOR:	.ASCIZ /DESOLE/
$EPOOR:	.ASCIZ /POOR/
$SPOOR:	.ASCIZ /ASI@ASI/
$GPOOR:	.ASCIZ /BEDAURE/
$FROME:
$SROME:
$GROME:
$EROME:	.WORD PLYFLD+128+26+32768
	.ASCII	/ROM@ERROR/
	.WORD PLYFLD+0+20+32768
	.ASCII	/M/
	.WORD PLYFLD+0+22+32768
	.ASCII	/L/
	.WORD PLYFLD+64+23+32768
	.ASCIZ	/20@24@28@2C@30@34@38@3C/
	BFILL
$FROMO:
$SROMO:
$GROMO:
$EROMO:	.WORD PLYFLD+128+20+32768
	.ASCIZ	/ROM@OK/
	BFILL
$FSELF:
$SSELF:
$GSELF:
$ESELF:	.WORD PLYFLD+128+18+32768
	.ASCII	/RAM@OK/
	.WORD PLYFLD+224+14+32768
	.ASCII	/SHOTS@PER@COIN/
	.WORD PLYFLD+224+12+32768
	.ASCII /PLUNGER/
	.WORD PLYFLD+224+10+32768
	.ASCIZ /BALL/
	BFILL
	.CSECT GFWPLY
RAMBAD: .ASCIZ	/RAM@BAD/
	.END
                                                                                                                                                                                                                                                                                                                                              