	.TITLE GOLF MINI-GOLF VERSION 3
	.RADIX 16
	.ASECT
	.REPT 0
*************************
*
*MINI-GOLF
*
*PROGRAMMER: DAN MOSS
*	     DAVE SHEPPERD
*
*CHECKER:
*
*HARDWARE:
* SPRINT-4
* SOUNDS BY TI SOUND CHIP
* SCREEN SIZE:28X32 (ROTATED)
*
*SOFTWARE:
* 8K STARTING AT 2000
* 4 INTERRUPTS/FRAME
* COIN ROUTINE="PENNY"
*
*************************
 LINKAGE: 3M:/L,DK1:LST.LST/A=GOLF,GFCORS,GFWPLY,HOLES,MGCOIN,GFVECT
	WHERE MGCOIN COMES FROM MGCONF& PENNY
	GFVECT LOADS NMI,IRQ, & REST VECTORS
	
THIS GAME PLAYS 16 HOLES OF MINATURE GOLF.
THE PLAYER BUYS STROKES ANY TIME DURING
THE GAME. SCORING IS THE SAME AS IN REGULAR
GOLF. A RUNNG 'PAR' VALUE TELLS THE PLAYER
HOW WELL HE IS DOING. IF THE PLAYER TAKES
TOO MUCH TIME, A SQURREL RUNS OUT AND
PICK-UP THE PLAYER'S BALL.
	.ENDR
	.PAGE
	.SBTTL RAM ALLOCATIONS
;
;RAM ALLOCATIONS
;
	.GLOBL WATCH,TEEX,TEEY,BARRH,BARRL,LNG,FRMCNT,HOLE,RANDOM
	.GLOBL XPOS,YPOS,DIRECT,CPPLYA,SLDTST
	.=20
VIDCON:	.BLKB 1			;COINCIDENCE READ
	.=24
SOUNDS:	.BLKB 1
	.=40
OPSWA:  .BLKB 1			;8 BITS OPTION SWITCH
				;D7-COIN OPTION 1
				;D6-COIN OPTION 0
				;D5-LANGUAGE OPTION 1
				;D4-LANGUAGE OPTION 0
				;D3-(SPARE)
				;D2-(SPARE) 1/2 BONUS STROKES
SHOTS	=2			;D1-1/2 BONUS STROKES
B.ATSD	=1			;D0-ATTRACT MODE SOUNDS

OPSWB:	.BLKB 1
				;D7=COLLISION-BLK BALL/PLYFLD
				;D6=     "   -WHT BALL/PLYFLD
				;D5=     "   -BLK BALL/WHT BALL
				;D4=(SPARE)
				;D3=V-BLANK
				;D2=(SPARE)
				;D1=STEERING A
				;D0=STEERING B
LIGHTS: .BLKB 2
WATCH:	.BLKB 2
IRQRST:	.BLKB 1

	.=60
$COINA:
$LAM:
$CMODE:
COINDR: .BLKB 1		;COIN DOOR
				;D7=RIGHT COIN MECH
				;D6=LEFT COIN MECH
B.SLAM	=20			;D5=SLAM SWITCH
B.TST	=10			;D4=TEST MODE SWITCH
				;D3-D0=N.A.
CONTRL:	.BLKB 1			;CONTROL INPUTS
B.STRT	=80			;D7=START SWITCH
B.PG2	=40			;D6=PLUNGER SENSOR 2
B.PG1	=20			;D5=PLUNGER SENSOR 1
B.NEXT  =10			;D4=MOVE TO NEXT HOLE BUTTON
				;D3=SPARE
				;D2=SPARE
				;D1=(SPARE)
				;D0=(SPARE)
SKIP3:	.BLKB 2
DIAGN:	.BLKB 1
	.=068
NOISE:	.BLKB 2		;NOISE ENABLE
SNDDSB:	.BLKB 2		;TONE ENABLE
	.BLKB 2
	.BLKB 2
	.=080
ZPAGE:
	.IRP Z,<0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15>
	.GLOBL R'Z
	.LIST
R'Z:	.BLKB
	.NLIST
	.ENDR

; MOVING OBJECT CONTROLS

PLAY2Y:	.BLKB 2		;BLACK BALL
PLAY1Y:	.BLKB 6		;WHITE BALL
PLAY2X: .BLKB 1
UPPER1:	.BLKB 1
SKIP1:	.BLKB 1
LOWER1:	.BLKB 1
PLAY1X:	.BLKB 1
UPPER2:	.BLKB 1
SKIP2:	.BLKB 1
LOWER2:	.BLKB 1

; WORKING MEMORY

;****
;DO NOT MOVE OR CHANGE THE ORDER OF THE
;FOLLOWING!!!
PLAY1:
XPOS:	.BLKB 2
XPARAM:
YPOS:	.BLKB 2
PLAY2:
XPOS2:	.BLKB 2
YPOS2:	.BLKB 2
ACCEL:	.BLKB
PNTRX:	.BLKB
SAVEX:	.BLKB
PNTRY:	.BLKB
OBJPIX:	.BLKB 2		;UPPER/LOWER PIX SELECT WHITE
HLCNST:	.BLKB 2
OBJ2PX:	.BLKB 2		;UPPER/LOWER PIX SELECT BLACK
;*END OF 'NOT NOT MOVE' ***
VEL:	.BLKB 2		;VELOCITY VECTOR
SQRLX:	.BLKB
SQRLY:	.BLKB
OLDBX:	.BLKB
OLDBPX:	.BLKB
ANG:	.BLKB 2
DIRECT	=ANG+1
DIR:	.BLKB 1
FRAME:	.BLKB 1
PLUNG:	.BLKB 2
ATRSEQ:	.BLKB 1		;ATTRACT MODE SEQUENCER
TEEY:	.BLKB 1
TEEX:	.BLKB 1
BARRL:	.BLKB 1		;LSB OF MOVING BARRIER
BARRH:	.BLKB 1		;MSB OF MOVING BARRIER
STRKW:  .BLKB 1		;STROKE COUNTERS
STRKB:	.BLKB 1
LITES:	.BLKB 1		;ATTRACTION LIGHT RING COUNTER
NONVOL:		;NON-VOLITILE STORAGE
SCORE:	.BLKB 1		;WHITE PLAYER
SCORE2:	.BLKB 1		;BLACK PLAYER
PLAYER:	.BLKB 1		;MASTER CONTROL
STRTER: .BLKB 1		;GAME START CONTROL
LNG:	.BLKB 2		;LANGUAGE SELECT
$CCTIM:	.BLKB 1		;TIMER FOR ELECTRO-MECHANICAL COUNTER
$PSTSL:	.BLKB 2
$INTCT: .BLKB 1
$LMTIM:	.BLKB 1
$CNCT:	.BLKB 1
$CNSTT:	.BLKB 2
SPOOL:	.BLKB 1		;SHOT POOL
FRMCNT:	.BLKB 1
DBOUNC: .BLKB 1		;SWITCH DEBOUNCE COUNTER
HOLE:	.BLKB 1		;CURRENT HOLE #
PAR:	.BLKB 1		;ACCUM PAR VALUE
FREEZE:	.BLKB 1		;SHORT TIMER
RANDOM: .BLKB 1
POLYL:	.BLKB 1		;RANDOM NUMBER
POLYH:	.BLKB 1
SREG:	.BLKB
SNDCTL:	.BLKB 4
ENDZPG:


	.GLOBL $COINA,$LAM
	.GLOBL $LMBIT
	.GLOBL $CNSTT,$PSTSL
	.GLOBL $INTCT,$CCTIM
	.GLOBL $LMTIM,$CNCT
	.GLOBL MOOLAH		;COIN ROUTINE
	.GLOBL NMI		;NMI ADDRESS
	.GLOBL IRQ		;IRQ ADDRESS
	.GLOBL PWRON,CLEAR,CLRSCN	;POWER-ON RESET ADDRESS
	.GLOBL SPCOIN,SETATR
	.GLOBB SREG,SNDCTL

	.IRPC X,<01234567>
	.GLOBL CHKS'X'K
	.ENDR
	.SBTTL MACROS

	.MACRO MSG COLOR,OP
	.IIF EQ, COLOR-1,SEC
	.IIF EQ, COLOR-2,CLC
	.IIF NB,<OP>,LDY I,OP
	JSR MSG
	.ENDM

	.MACRO EMSG OP
	.IIF NB,<OP>,LDY I,OP
	JSR EMSG
	.ENDM

	.MACRO NUMBER	DEST,COLOR,OP
	.IF NB <DEST>
	LDA I,DEST&0FF
	STA R2
	LDA I,DEST&-100/100
	STA R3
	.ENDC
	.IF NB,COLOR
	.IIF EQ,COLOR-1,LDA I,80
	.IIF EQ,COLOR-2,LDA I,0
	STA R4
	.ENDC
	LDA OP
	JSR CVD
	.ENDM

	.MACRO MULT	P,M,ML
	.IIF NB,<P>,LDX I,P	;PRODUCT @
	.IIF NB,<M>,LDY I,M	;MULTIPLICAND @
	.IIF NB,<ML>,LDA ML	;MULTIPLIER 
	JSR MULT
	.ENDM

	.MACRO GENS OPCODE
	.IRP	X,<OPCODE>
	.MACRO X'S COUNT,LABEL
	.REPT COUNT
	X	LABEL
	.ENDR
	.ENDM X'S
	.ENDR
	.ENDM GENS

	GENS <ASL,LSR,ROL,ROR,DEX,DEY,INX,INY,INC,DEC>

	.MACRO SAVE OP
	.IRP X,<OP>
	LDA X
	PHA
	.ENDR
	.ENDM

	.MACRO RESTOR OP
	.IRP X,<OP>
	PLA
	STA X
	.ENDR
	.ENDM
	
	.MACRO CLR OP
	 LDA I,0
	.IRP X,<OP>
	STA X
	.ENDR
	.ENDM
		
	.MACRO MOVB D,S
	LDA S
	STA D
	.ENDM
	
	.MACRO MOV D,S
	LDA S
	STA D
	LDA S+1
	STA D+1
	.ENDM
	
	.MACRO ADD OP
	CLC
	ADC OP
	.ENDM
	
	.MACRO ADDM D,S1,S2,C
	.IIF B,<C>,CLC
	LDA S1
	.IF B,<S2>
	ADC D
	.IFF
	ADC S2
	.IFTF
	STA D
	LDA S1+1
	.IFT
	ADC D+1
	.IFF
	ADC S2+1
	.ENDC
	STA D+1
	.ENDM

	.MACRO SUB OP
	SEC
	SBC OP
	.ENDM

	.MACRO SUBM D,S1,S2,C
	.IIF B,<C>,SEC
	.IF NB,<S2>
	LDA S1
	SBC S2
	.IFF
	LDA D
	SBC S1
	.IFTF
	STA D
	.IFT
	LDA S1+1
	SBC S2+1
	.IFF
	LDA D+1
	SBC S1+1
	.ENDC
	STA D+1
	.ENDM

	.LIST MEB
	.NLIST BYT
	.ENABL AMA
	.PAGE
	.SBTTL CONSTANTS
;
;CONSTANT ASSIGNMENTS
;
DISPLL	=00		;ADDRESS OF DISPLAY RAM
DISPLH	=08	
PLYFLD	=0800			;DISPLAY RAM ADDRESS
MAXFOR  =0D
BLANK	=00		;CODE FOR BLANKED BALL
$LMBIT	=20		;SLAM SWITCH POSITION
NMIDIS	=60		;NMI DISABLE
NMIEN	=61		;NMI ENABLE
SNDSON	=6A		;SOUNDS ON
SNDSOF	=6B		;SOUNDS OFF
COINOF	=6C
COINON	=6D
WH	=1
BK	=2
OFFST	=PLAY2-PLAY1	;OFFSET TO SECOND PLAYER'S PARAMETERS
;
;SOUNDS
;
	.GLOBB S.HIT,S.HOLE,S.SQR,S.H2O,S.SAND,S.COIN,S.CLUB
	.GLOBB S.FANF
;
CNTBLK =XPARAM-PLAY1
;
;CONTROL WORD "PLAYER"
;
B.ATR	=80		;ATTRACT MODE
B.SLOK  =40		;START LOCK OUT
B.MSG	=20		;WARNING GIVEN
B.WARN	=10		;SHOTS LOW WARNING
B.VBLK	=08		;V-BLANKING
B.BMOV	=04		;BALL IN MOITION
B.SQR	=02		;SHOT TIMER
B.DROP	=01		;HOLE SUNK
	.GLOBL	B.ATR,B.SLOK,B.MSG,B.WARN,B.VBLK,B.BMOV
	.GLOBL	B.SQR,B.DROP,B.STOP,B.PLY,B.WHDN,B.BSTR
	.GLOBL	B.BKDN,B.TUNE,STRTER,PLAYER
;
MINDCL  =0C		;MINIMUM DECELERATION
MAXSTK  =06		;MAXIMUM NUMBER OF STROKES
TOOFST	=5		;TOO FAST TO FALL IN CUP
SANDA	=MINDCL*3	;SAND DECELERATION
PRGSPC  =2000		;ROM IS AT 2000-3FFF
;
;CONTROL WORD "STRTER"
;
B.STOP  =80		;BALL STOPPED
B.PLY	=40		;PLAYER SELECT
B.WHDN	=20		;WHITE DONE
B.BSTR	=10		;BLACK STARTED (2 PLAYER)
B.BKDN	=08		;BLACK DONE
B.TUNE	=04		;PLAY TUNE
	.=PRGSPC

	.GLOBL BARIER,MSG,EMSG,COURSE,CVD
	.PAGE
	.SBTTL MAIN PROGRAM
;
;CONTROL WORD "PLAYER"
;1=TRUE
;BIT 7-ATTRACT MODE
;BIT 3-V-BLANK
;BIT 2-BALL IN MOTION
;BIT 1-TIMER
;BIT 0-HOLE SUNK

;DBUG=1		;DEFINE FOR DEVELOPMENT
	.IIF NDF,DBUG,DBUG=0
	.IF EQ,DBUG
	.VCTRS 0F4B0,IRQ,NMI
	.VCTRS 0F4B4,03A2,0BDEA,0F4B0
	.VCTRS 0F4BA,9DEA,0F428,0CAEA
	.VCTRS 0F4C0,0F510,4CEA,PWRON
	.ENDC
CHKS0K:	.BYTE 55		;CHECKSUM

SETATR:	LDA I,B.ATR
	STA Z,PLAYER
	LDA I,B.BSTR		;KEEP THIS BIT
	AND STRTER
	STA STRTER
	STA NMIDIS		;TURN OFF CONTROL INTERRUPTS
	BPL COMMON		;(ALWAYS)
;
;	
;
	.ENABL LSB
GAME:	LDA I,0
	STA SCORE
	STA SCORE2
	STA PAR
	STA PLAYER		;RESET ATTRACT MODE
	STA STRTER		;AND STATES
	LDA POLYL
	AND I,0F
	STA HOLE		;START AT RANDOM
COMMON:	JSR PUTCRS		;PUT UP A NEW COURSE
WMRTN:	MSG WH,WHITE
	BIT PLAYER		;ATTRACT MODE?
	BPL 1$			;NO, SKIP RATING
	LDA PAR			;PAR = 0?
	BEQ 1$			;YES. SKIP RATING
	LDX I,0			;RATE WHITE
	JSR RATE
1$:	LDA I,B.BSTR		;BLACK PLAYER UP?
	AND STRTER
	BEQ PLAY		;NO. SKIP MESSAGE
	MSG BK,BLACK
	BIT PLAYER		;ATTRACT MODE
	BPL PLAY		;NO, SKIP RATING
	LDA PAR			;PAR = 0?
	BEQ PLAY		;YES SKIP RATING
	LDX I,1			;RATE BLACK
	JSR RATE
;
	.DSABL LSB
PLAY:	LDX #0FF
	TXS			;RESET STACK
WAIT:	LDA I,B.VBLK
	.ENABL LSB
	BIT Z,PLAYER		;WAIT FOR V-BLANK
	CLI
	BNE RUN
	BMI WAIT		;ATTRACT MODE.
	LDA I,B.BMOV
	BIT PLAYER		;BALL IN MOTION?
	BNE WAIT		;YEP. SKIP CONTROLS
	LDA OPSWB		;GET CONTROL DATA
	EOR DIR			;CHANGE?
	AND I,1
	BEQ WAIT		;NOPE
	LDA OPSWB
	AND I,1
	STA DIR			;MAKE NEW DIR
	BEQ WAIT
	LDA OPSWB
	AND I,2
	BEQ 1$
	DEC DIRECT
	DEC DIRECT
1$:	INC DIRECT
	JMP WAIT
RUN:	LDA Z,PLAYER
	AND I,^C<B.VBLK>	;CLEAR FLAG
	STA Z,PLAYER
	STA Z,WATCH		;KICK WATCH DOG
	LDA #B.TUNE
	BIT STRTER		;ARE WE IN TUNE MODE?
	BEQ 8$			;NO
	LDX SREG		;YES. MAKING MUZAK?
	BNE PLAY		;YEP. WAIT FOR IT TO STOP
	EOR STRTER		;DROP TUNE BIT
	STA STRTER
	EMSG BONUS		;ERASE BONUS MESSAGE
	JSR WCMSG		;RE-WRITE COURSE # MESSAGE
	JMP PLAY		;RE-SYNC TO VBLANK
8$:
	LDA Z,COINDR
	AND I,B.TST		;TEST MODE?
	BNE 6$			;NO
	JMP PWRON		;GO TO SELF-TEST
6$:	LDA $CNCT		;ANY COINS INPUT?
	BEQ 2$			;NOPE
	LDA SPOOL		;GET CURRENT POOL
	BNE 5$			;NOT EMPTY
	EMSG GMEOVR		;ERASE 'GAME OVER'
5$:	MSG WH,REM1		;WRITE SHOTS LEFT (IN CASE OF BLINK MODE)
	LDA PLAYER
	AND I,^C<B.MSG>		;CLEAR WARNING FLAG
	STA PLAYER
	LDA OPSWA
	ROLS 3
	AND I,3
	TAX
	BIT PLAYER		;ATTRACT MODE?
	BMI 9$			;YES
	INX			;NO. GIVE HIM A BONUS
9$:	LDA AX,SPCOIN		;GET SHOTS/COIN OPTION
	ADD SPOOL
	BCC 3$			;IT OK
	LDA I,0FF		;CAN'T OVERFLOW.
3$:	STA SPOOL		;UPDATE SPOOL
	DEC $CNCT		;ACCEPT THE COIN
	CLR FREEZE		;ERASE MESSAGE
JPLY:	JMP PLAY
2$:	LDA FREEZE		;SHOULD BE ASLEEP?
	BNE JPLY		;YES
	LDA I,B.BMOV
	BIT PLAYER		;BALL IN MOTION?
	BEQ BATR		;BALL'S STOPPED
	JSR MOVE		;MOVE THE BALL (SREG RETURNS WITH SOUND)
	JSR APPACL		;GO APPLY ACCELERATIONS TO VELOCITIES
	LDA I,MINDCL/2		;USE 1/2 DECEL FOR ATTRACT MODE
	BIT PLAYER		;ATTRACT MODE?
	BMI 7$			;YES. (NO SOUND)
	LDA I,MINDCL
7$:	STA ACCEL
	BCS BATR		;NORMAL
	.DSABL LSB
STOPB:	LDA I,0			;STOP THE BALL
	STA VEL
	STA VEL+1
	LDA HLCNST+1		;ON A HILL?
	BNE BATR		;YEP. IT WILL SPEED UP AGAIN
	LDA STRTER		;BALL STOPPED. SIGNAL SAME
	ORA I,B.STOP
	STA STRTER
	LDA Z,PLAYER
	AND I,^C<B.BMOV>
	STA Z,PLAYER
	BPL BATR
	JMP SETATR
BATR:	LDA FREEZE		;ASLEEP?
	BNE JPLY		;YEP
	JMP ATRACT		;CONTINUE

	.RADIX 10
SPCOIN:	.BYTE 25,30,35,40,45	;SHOTS PER COIN OPTION
	.RADIX 16
	.PAGE
	.SBTTL PLAYER RATING
RATE:	LDA PAR			;GET ACCUMULATED PAR
	ASL			;MULTIPLY BY 3
	ADC PAR
	LDY I,0			;START WITH WELL
	CMP ZX,SCORE		;EQUAL OR UNDER PAR?
	BCS 1$			;YES, WELL!
	INY			;SKIP TO AMATEUR
	STA R0			;SAVE PAR
	LSRS 2			;DIVIDE PAR BY 4
	ADD R0			;THIS IS HOW MUCH OVER PAR THE
				;  PLAYER MUST BE FOR A 'POOR' RATING
	CMP ZX,SCORE		;HOW DOES HE RATE?
	BCS 1$			;FAIR
	INY			;POOR
1$:	STX R0			;SAVE PLAYER INDEX
	LDA OPSWA		;GET LANGUAGE SELECT
	AND I,30
	LSRS 3
	ADC R0			;ADD IN PLAYER INDEX
	STA R0
	TYA			;GET RATING
	ASLS 3			;COMPUTE MESSAGE INDEX
	ADC R0			;ADD IN RATING
	TAX
	LDA I,PLYFLD&-100/400
	STA R3
	LDA AX,RATTBL		;GET TARGET ADDRESS
	ASL			;PUT COLOR BIT INTO R0
	ROL R0
	ASL
	ROL R3			;PUT ADDRESS INTO R2, R3
	ASL
	ROL R3
	ORA I,31.		;AT THE TOP
	STA R2
	TYA
	ASL			;COMPUTE MESSAGE #
	TAY
	LSR R0			;PUT COLOR BACK INTO CARRY
	MSG			;WRITE RATING
	RTS

	.RADIX 10
RATTBL:	.BYTE 128/8+128,672/8	;ENGLISH PRO
	.BYTE 64/8+128,736/8	;FRENCH
	.BYTE 0+128,672/8	;SPANISH
	.BYTE 64/8+128,672/8	;GERMAN
	.BYTE 0+128,640/8	;ENGLISH AMATUER
	.BYTE 96+128,736/8	;FRENCH
	.BYTE 0+128,672/8	;SPANISH
	.BYTE 0/8+128,640/8	;GERMAN
	.BYTE 96/8+128,672/8	;ENGLISH POOR
	.BYTE 0+128,704/8	;FRENCH
	.BYTE 0+128,672/8	;SPANISH
	.BYTE 0+128,672/8	;GERMAN
	.RADIX 16
	.PAGE
;
;ATTRACT MODE TEST
;
ATRACT: BIT PLAYER		;ATTRACT MODE?
	BMI 2$			;YEP
	BVS 7$			;START LOCKOUT
	BIT CONTRL		;START SWITCH ACTIVE?
	BMI 8$			;NO
	BIT DBOUNC		;STILL DOWN FROM FIRST PLAYER?
	BPL 9$			;NO
	LDA I,84		;POST SWITCH TIMEOUT
	STA DBOUNC
	BMI 7$			;(ALWAYS)
9$:	INC DBOUNC
	LDA DBOUNC
	CMP I,6			;4 FRAME DE-BOUNCE
	BMI 7$	
	LDA I,B.BSTR		;ENABLE PLAYER 2
	STA STRTER
	MSG BK,BLACK		;WRTIE BLACK
	LDA I,B.SLOK
	ORA PLAYER		;LOCK OUT START SW
	STA PLAYER
	BNE 7$			;(ALWAYS)
8$:	DEC DBOUNC		;START SW MUST BE UP FOR A WHILE
	BMI 7$
	LDA I,2			;TIMED OUT DOWN
	STA DBOUNC		;PRE-PARE FOR TIME UP
7$:	LDA PLAYER		;WHAT ARE WE DOING?
	AND I,B.SQR!B.WARN	;SPECIAL?
	BEQ WHOSUP		;NO
	AND I,B.SQR		;SQUIRREL?
	BEQ 11$			;NO, LOW SHOTS WARNING
	JMP SQUIRL
11$:	JMP WME			;LOW STROKES WARNING DONE
2$:	LDA SPOOL		;ANY CREDIT?
	BEQ 20$			;NO
	BIT CONTRL		;YES. START SWITCH ON?
	BMI 20$			;NO. KEEP LOOKING
	LDA I,84		;INIT DEBOUNCE FOR NEXT PASS
	STA DBOUNC
	JMP GAME		;AND GO START THE GAME
20$:	LDA PLAYER
	BPL WHOSUP		;NOT IN ATTRACT MODE
	AND I,B.BMOV		;BALL IN MOTION?
	BNE 10$			;YEP. WAIT FOR IT TO STOP
	LDA VEL+1		;POINTER STOPPED?
	BNE 12$			;NOPE. WAIT FOR IT
	LDA ATRSEQ		;WHAT ARE WE DOING?
	BEQ 3$			;SETTING ROTATION.
	CMP DIRECT		;ROTATING BALL. MATCH?
	BNE 4$			;NO. KEEP ROTATING.
	LDA I,5			;YEP. GIVE THE BALL SOME VELOCITY
	STA VEL+1
	JMP SBIM		;AND SET IT IN MOTION
4$:	INC DIRECT		;ROTATE THE BALL
6$:	JMP POINT		;SELECT THE CORRECT PICTURE
3$:	LDA POLYL		;GET A RANDOM NUMBER
	AND I,3F		;BETWEEN 1-3F
	BNE 5$
	LDA I,1			;CAN'T BE A 0
5$:	STA ATRSEQ		;SET THE SEQUENCER
	CLC
	ADC I,1			;MAKE THE BALL ROTATE 360 DEGREES
	STA DIRECT
12$:	JMP POINT		;GO FIGURE THE PICTURE
10$:	JMP PLAY
	.PAGE
	.SBTTL WHOSUP: FIND OUT WHICH SIDE PLAYS, NEXT.
;
;THE FOLLOWING CODE DETERMINES WHICH PLAYER IS UP FOR BOTH THE
;SINGLE AND TWO PLAYER GAMES
;
;
;CONTROL WORD STRTER
;BIT 7 - 1 =BALL HAS STOPPED
;	 0 = ANY OTHER STATE
;BIT 6 - 1 = BLACK PLAYER UP
;	 0 = WHITE PLAYER UP
;BIT 5 - 1 = WHITE DONE THIS HOLE
;	 0 = WHITE NOT DONE
;BIT 4 - 1 = 2 PLAYER GAME
;	 0 = 1 PLAYER GAME
;BIT 3 - 1 = BLACK DONE THIS HOLE
;	 0 = BLACK NOT DONE (OR NOT STARTED)
	
	
WHOSUP:	LDA STRTER		;BALL STOPPED?
	BMI 10$			;YES.
	JMP CNTRLS		;NO.
10$:	AND I,7F		;DROP FLAG
	STA STRTER
	LDA PLAYER
	AND I,B.DROP!B.SQR	;BALL STOPPED BECAUSE OF PUTT SUNK OR SQR?
	BEQ 1$			;NO IT JUST STOPPED
6$:	LDA I,B.BKDN
	LDY I,0
	LDX SAVEX
	BIT STRTER		;WHO IS UP NOW?
	BVS 2$			;BLACK
	LDY I,1
	LDA I,B.WHDN		;WHITE
2$:	ORA STRTER		;FORCE SIDE DONE
	STA STRTER
	LDA I,BLANK		;BLANK THE BALL
	STA ZX,OBJPIX		;NOW
1$:	LDA PLAYER
	AND I,^C<B.SQR!B.DROP>
	STA PLAYER
	LDA STRTER
	AND I,B.WHDN!B.BKDN!B.BSTR
	BEQ 5$			;SINGLE PLAYER
	CMP I,B.WHDN		;WHITE DONE, ONE PLAYER?
	BEQ NUHOLE		;YEP. GO TO NEXT
	CMP I,B.WHDN!B.BKDN!B.BSTR	;WHITE AND BLACK DONE?
	BEQ NUHOLE		;NEXT HOLE
	CMP I,B.BKDN!B.BSTR	;BLACK DONE?
	BEQ 5$			;YES. SWITCH TO WHITE
	CMP I,B.WHDN!B.BSTR	;WHITE DONE, 2 PLAYER?
	BEQ 12$			;YES, SWITCH TO BLACK
	LDX I,0			;EXCHANGE
	BIT STRTER
	BVC 7$
	INX
7$:	LDA ZX,STRKW		;CHECK STROKE COUNT OF CURRENT GUY
	CMP I,MAXSTK		;TOO MANY?
	BPL 13$			;YEP. BLANK THE BALL
	BVS 5$			;SWITCH TO WHITE
12$:	LDA I,OFFST		;SWITCH TO BLACK
	STA SAVEX
	LDA STRTER
	ORA I,B.PLY
	STA STRTER
	LDA STRKB
	CMP I,MAXSTK		;CHECK STROKE COUNT
	BMI 11$
13$:	JMP 6$			;TOO MANY
5$:	LDA I,0			;SWITCH TO WHITE
	STA SAVEX
	LDA STRTER
	AND I,^C<B.PLY>
	STA STRTER
	LDA STRKW
	CMP I,MAXSTK		;CHECK STROKE COUNT
	BPL 13$			;TOO MANY
11$:	
	LDX SAVEX		;CHECK BALL
	LDA ZX,XPOS+1		;0?
	BEQ 4$			;YEP
	LDA ZX,YPOS+1		;0?
	BEQ 4$			;YEP
	LDA ZX,OBJPIX		;BLANK PIX?
	BNE 3$			;NO. ITS OK
4$:	LDA TEEX		;PUT BALL ON TEE
	STA XPOS+1(X)
	LDA TEEY
	STA YPOS+1(X)
3$:	LDA XPOS+1(X)		;PASS POSITION TO
	STA PNTRX		;PNTRX FOR POINTER'S USE
	LDA YPOS+1(X)
	STA PNTRY
	LDA POLYL		;POINT BALL IN RANDOM DIRECTION
	STA DIRECT
	CLR FRAME		;RESET SQUIRREL TIMER
	JMP WM
JCNTRL:	JMP CNTRLS		;CONTINUE
	.PAGE
;
;SELECT A NEW HOLE
;
NUHOLE: LDA PLAYER
	AND I,B.SLOK!B.MSG
	STA PLAYER
	LDA STRTER
	AND I,B.BSTR!07!B.PLY	;KEEP ONLY MODE (1 OR 2 PLAYER) AND PLAYER
	STA STRTER
	LDA SPOOL	;ANY CREDITS?
	BEQ JSATR		;NOPE. SKIP TO ATTRACT MODE.
;
;
	JMP COMMON		;BACK TO WAIT
;
;GAME OVER
;
JSATR:	JMP SETATR		;BACK TO ATTRACT MODE

WM:	LDA PLAYER
	AND I,B.MSG		;HAS MESSAGE BEEN GIVEN?
	BNE JCNTRL		;YEP.
	LDA SPOOL
	BEQ JCNTRL		;IGNORE MESSAGE ON LAST STROKE.
	CMP I,6			;GETTING LOW?
	BCS JCNTRL		;NO, DON'T WORRY
	LDA PLAYER
	ORA I,B.WARN!B.MSG	;SET WARNING MODE
	STA PLAYER
	LDX I,7
1$:	LDA ZX,PLAY2X		;COPY BALL STATISTIS TO WORKING RAM
	STA ZX,R8
	DEX
	BPL 1$
	MOVB R10,PLAY2Y
	MOVB R14,PLAY1Y
	JSR CLRSCN		;ERASE THE PLAYFIELD
	LDX I,15.		;GET RID OF BALL PIX'S
2$:	STA ZX,PLAY2Y
	DEX
	BPL 2$
	MSG WH,WRN2		;PRINT WARNING MESSAGE
	LDA OPSWA		;GET COINING OPTION
	AND I,0C0
	ASL			;PUT THEM AT THE BOTTOM
	ROLS 2
	TAX
	LDA AX,SPCOIN		;EXTRA CREDIT
	JSR CVD			;PRINT MESSAGE
	MOVB FREEZE,<I,100.>	;WAIT 4 SECONDS
	JMP PLAY
WME:	LDA PLAYER		;WARNING TIMED OUT
	AND I,^C<B.WARN>	;SIGNAL WARNING COMPLETE
	STA PLAYER
	JSR CLRSCN		;ERASE MESSAGE
	LDX I,7.		;COPY WORKING RAM TO BALL STATISTICS
1$:	LDA ZX,R8
	STA ZX,PLAY2X
	DEX
	BPL 1$
	MOVB PLAY2Y,R10
	MOVB PLAY1Y,R14
	JSR COURSE		;PUT THE COURSE BACK UP
	JSR WCMSG		;AND ITS NUMBER
	JMP WMRTN		;FINISH UP

	.SBTTL MAIN PROGRAM - PLAY CONTROLS
;
;SERVICE PLAYER CONTROLS
;
CNTRLS:	LDA PLAYER
	AND I,B.BMOV		;BALL IN MOTION?
	BEQ 11$			;NO. PROCESS CONTROLS
	JMP PLAY		;YES. SKIP CONTROLS AND POINTER.
11$:	LDA PLAYER
	BMI 4$			;ATTRACT MODE. SKIP CONTROLS.
	ASL			;START SW LOCKOUT?
	BPL 2$			;NO. IGNORE NEW HOLE
	LDA CONTRL
	AND I,B.NEXT		;MOVE TO NEW HOLE?
	BEQ 1$			;YES
	LDA I,0
	STA DBOUNC
	BEQ 2$			;(ALWAYS)
1$:	INC DBOUNC
	LDA DBOUNC
	CMP I,8
	BNE 2$
	LDA STRKW		;WAS THE HOLE STARTED?
	ORA STRKB
	BEQ 22$			;NO ONE TOOK A STROKE
	LDX I,0			;START WITH WHITE
	LDA I,B.WHDN
19$:	BIT STRTER		;PLAYER STILL IN?
	BNE 21$			;NO.
20$:	LDA I,MAXSTK
	SUB <ZX,STRKW>		;COMPUTE PENALITY
	ADD <ZX,SCORE>
	STA ZX,SCORE		;ALWAYS COSTS 6 STROKES TO SKIP A HOLE
21$:	TXA
	BNE 22$			;DONE WITH BOTH PLAYERS
	LDA I,B.BKDN
	INX			;SWITCH TO BLACK
	BNE 19$			;(ALWAYS)
22$:	LDA STRTER
	AND I,B.PLY!B.BSTR	;2 PLAYER?
	BEQ 23$			;NO
	LDA STRTER		;SWITCH PLAYERS
	EOR I,B.PLY
	STA STRTER		;BECAUSE NUHOLE DOES TOO!
23$:	JMP NUHOLE
2$:	LDA Z,FRMCNT
	AND I,03
	BNE POINT
	INC Z,FRAME		;SHOT TIMER
	BEQ 10$			;TIMER UP
	LDA FRAME
	AND I,0F
	BNE POINT
	LDA SREG		;MAKING NOISE?
	ORA SNDCTL
	BNE POINT		;YES. IGNORE CLOCK SOUND
	LDA FRAME
	LSRS 3
	ORA #0E0
	AND #0FE
	STA SNDCTL+1		;SET UP TONE
	LDA #3			;TONE FOR 2 FRAMES
	STA SNDCTL		;FOOL THE SOUND ROUTINE
4$:	BNE POINT		;(ALWAYS)
10$:	LDA PLAYER
	ORA I,B.SQR		;START THE SQUIRREL
	STA Z,PLAYER
	LDA I,0FE
	STA Z,SQRLX		;SQUIRREL POSITION
	LDA SAVEX
	EOR I,4			;USE THE OTHER OBJECT
	TAX
	LDA ZX,OBJPIX		;SAVE BALL'S PICTURE
	STA OLDBPX
	LDA ZX,XPOS+1
	STA Z,OLDBX		;SAVE BALL X POSITION
	LDA ZX,YPOS+1
	STA SQRLY		;AND Y
	EMSG CORSE		;ERASE 'COURSE'
	LDY I,20
	STA NY,R2		;AND #
	LDY I,40
	STA NY,R2
JMPPLY:	JMP PLAY
;
;BALL POINTER CONTROL
;
POINT:	LDX SAVEX		;PLAYER INDEX
	LDA DIRECT
	AND I,3F		;SET DIRECT TO 6 BITS
	STA DIRECT
	LDA FRMCNT
	LSR			;EVEN FRAME?
	BCS 3$			;NO. GO DO DOT MOTION
	LDY I,0			;BIG BALL PIX
	JSR SWAPC		;SWAP CO-ORDINATES
	BNE 9$			;(ALWAYS)
3$:	MOV R8,VEL		;PUT VELOCITY INTO R8
	LDY I,COSPOL		;START WITH X
	LDX I,R6		;ADDR OF DEST
	LDA I,10		;PHASE SHIFT 90 DEGREES (COSINE REQUEST)
	JSR CMPTXY		;COMPUTE DELTA X
	LDX SAVEX
	ADDM <ZX,XPOS>,R6	;UPDATE X
	LDY I,SINPOL		;FINISH UP BY DOING Y
	LDX I,R6
	LDA I,0			;SINE REQUEST
	JSR CMPTXY
	LDX SAVEX
	ADDM <ZX,YPOS>,R6	;UPDATE Y
	LDY VEL+1
	INY			; MOVE  AT 1 LINE PER FRAME
	CPY I,12.		;BUT ONLY FOR 12 LINES
	BCC 5$
	LDY I,0			;ELSE RESET BACK TO 0
5$:	STY VEL+1
	LDY I,1			;GO CHANGE PIX TO LITTLE BALL
	LDX SAVEX
	JSR SWAPP		;SWAP PIX
9$:	BIT PLAYER		;ATTRACT MODE?
	BMI JMPPLY		;YEP. IGNORE PLUNGER
	BPL PLUNGE		;(ALWAYS)

SWAPC:	LDA PNTRX
	STA ZX,XPOS+1
	LDA PNTRY
	STA ZX,YPOS+1
SWAPP:	LDA I,BLANK
	STA ZX,OBJPIX+1		;LOWER
	TYA
	ADD <I,BB>		;COMPUTE PICTURE NUMBER
	STA ZX,OBJPIX		;UPPER
	RTS

BB	=08		;BIG BALL PIX #
LB	=09		;LITTLE BALL PIX #
	.PAGE
;
;WAITING FOR THE BALL TO BE HIT
PLUNGE: LDA SPOOL		;ANY SHOTS LEFT?
	BNE 6$			;YEP.
	JMP SETATR		;GAME OVER
6$:	LDA PLUNG+1		;PLUNGER FINISHED?
	BNE 2$			;YES
	LDA CONTRL		;PLUNGER OVERFLOW?
	AND I,B.PG1
	BEQ 5$			;YES
	STA NMIEN		;NO. ENABLE NMI'S
5$:	JMP PLAY
2$:	DEC PLUNG+1		;SUBTRACT 1
	MULT VEL,PLUNG,#60	;VEL=0.75*PLUNG + 1.5
	LDA VEL
	ADD #80
	STA VEL			;ADD 1.5
	LDA VEL+1
	ADC #1
	STA VEL+1
	CLR <PLUNG+1,NMIDIS>
	LDA #S.CLUB
	STA SREG
	LDA I,B.SLOK		;LOCKS OUT FURTHER STARTS
	ORA PLAYER
	STA PLAYER
	DEC SPOOL		;TAKE A SHOT FROM POOL
SBIM:	LDY I,0			;BIG BALL PIX
	LDX SAVEX		;INDEX=>X
	JSR SWAPC		;MAKE SURE THE RIGHT POSITION HERE
	LDA SAVEX
	EOR I,4
	TAY
	LDA I,B.SQR
	BIT PLAYER		;SQUIRREL RUNNING?
	BEQ 1$			;NO, NEVER MIND.
	EOR I,0FF		;YES
	AND PLAYER
	STA PLAYER		;STOP THE SQUIRREL
	LDX OLDBPX		;RESTORE OLD PICTURE
	STX ZY,OBJPIX
	LDX I,BLANK
	STX ZY,OBJPIX+1
	LDX OLDBX		;PUT IT WHERE IT
	STX ZY,XPOS+1		; BELONGS
	LDX SQRLY
	STX ZY,YPOS+1
	EMSG LOST		;ERASE 'TOO LONG'
	JSR WCMSG		;RE-WRITE 'COURSE XX'
	LDX SAVEX		;RESTORE X
1$:	LDA I,BB
	STA ZX,OBJPIX		;SELECT BALL PIX
	LDA SAVEX
	LSRS 2
	TAX
	BIT PLAYER		;ATTRACT?
	BMI 5$			;YES
	INC ZX,STRKW		;COUNT STROKE
;
;INCREMENT PAR AND SCORE
;
	LDA I,1			;FIRST STROKE?
	CMP ZX,STRKW
	BNE 3$			;NO
	TXA
	BEQ 6$			;WHITE PLAYER, SO INCREMENT
	LDA I,B.WHDN		;SPECIAL SQUIRREL CHECK
	BIT STRTER		;DID SQUIRREL TAKE WHITE BALL?
	BEQ 3$			;NO, SO SKIP INCREMENT
6$:	INC PAR			;BUMP PAR ON FIRST STROKE OF HOLE
3$:	INC ZX,SCORE		;GIVE 'IM A STROKE
5$:	LDA I,MINDCL		;START WITH MINIMUM DECELERATION
	BIT PLAYER		;ATTRACT MODE?
	BPL 2$			;NOPE. USE NORMAL FRICTION
	LDA I,MINDCL/2		;ELSE USE HALF OF NORMAL
2$:	STA ACCEL
	LDA PLAYER
	ORA I,B.BMOV		;PUT BALL IN MOTION
	STA PLAYER
	JMP PLAY
	.PAGE
;
;PLAYER TOOK TOO MUCH TIME
;
SQUIRL:	LDA SAVEX
	EOR I,4
	TAX
	LDA SNDCTL+2		;GET INTERRUPT COUNTER
	AND #0FC		;GET THE FRAME BITS
	CMP #60			;TIME?
	BCC 1$			;NOPE
	EOR SNDCTL+2		;YES. RESET TIMER
	STA SNDCTL+2
	LDA #S.SQR
	STA SREG		;MAKE SQUIRREL SOUND
1$:	LDA FRMCNT		;EVEN FRAME?
	LSR			;PIX SWAP?
	BCC 10$			;EVEN
	LDA SQRLX
	AND I,0C
	LSRS 2
	STA ZX,OBJPIX		;UPPER
	ORA I,4
	STA ZX,OBJPIX+1		;LOWER
	LDA PNTRY		;PUT SQUIRL ON TV
	ADC I,6			;MOVE THE SQUIRL UP A LITTLE
	STA ZX,YPOS+1
	LDA SQRLX
	STA ZX,XPOS+1
	BCC 11$			;(ALWAYS)
10$:	LDA OLDBPX
	STA ZX,OBJPIX		;BALL PICTURE (UPPER)
	LDA I,BLANK
	STA ZX,OBJPIX+1		;(LOWER)
	LDA OLDBX
	STA ZX,XPOS+1		;BALL POSITION
	LDA SQRLY
	STA ZX,YPOS+1
	LDA FRAME
	CMP I,4			;INITIAL TIME?
	BCC 2$			;YES. MOVE
	CMP I,45.		;WAIT PERIOD?
	BCC 11$			;YES. DON'T MOVE
2$:	DEC Z,SQRLX		;MOVE SQUIRREL
	DEC Z,SQRLX		;SQUIRREL FINISHED?
	BNE 11$			;NO.
	LDA STRTER
	ORA I,B.STOP
	STA STRTER
	LDA OLDBPX		;RESTORE OLD PICTURE
	STA ZX,OBJPIX
	LDA I,BLANK		;CLEAR LOWER HALF
	STA ZX,OBJPIX+1
	DEC SPOOL
	BEQ 30$
	DEC SPOOL		;SQUIRREL COSTS TWO STROKES FROM POOL
	BEQ 30$
	LDA SAVEX		;GET CURRENT PLAYER INDEX
	LSRS 2
	TAX
	LDA I,MAXSTK		;COMPUTE PENALTY
	SUB <ZX,STRKW>
	ADD <ZX,SCORE>		;APPLY IT
	STA ZX,SCORE
	EMSG LOST		;ERASE 'TOO LONG'
	JSR WCMSG		;PUT UP COURSE
	JMP WHOSUP		;CHANGE STATE
11$:	LDA SQRLX		;GET SQUIRRELS POSITION
	SUB <I,0A>		;-10
	CMP PNTRX		;MATCH BALL'S POSITION?
	BCS 13$			;NO.
	TAX			;USE SQUIRREL'S POSITION FOR THE BALL
	INX			;AND MAKE SURE THAT THE ABOVE TEST FAILS AGAIN
	STX PNTRX
	CLR <NMIDIS,PLUNG+1>	;CANCEL THE PLUNGER
	LDX SAVEX
	LDY I,0			;BIG BALL
	JSR SWAPC		;MAKE SURE OF PIX
12$:	JMP PLAY
13$:	JMP CNTRLS		;LET HIM HIT THE BALL BEFORE SQUIRREL GETS IT
30$:	JMP SETATR		;GAME OVER

CHKS1K:	.BYTE 55		;CHECK SUM BYTE 2400-27FF
	.SBTTL COURSE SELECT AND NUMBER
PUTCRS: JSR CLEAR
	CLI			;(CLEAR SETS MASK)
	LDA POLYL		;GET A RANDOM NUMBER
	STA RANDOM
	INC HOLE
	LDA HOLE
	AND I,0F
	STA HOLE
	JSR COURSE
	LDA STRTER
	AND I,B.PLY!B.BSTR
	BEQ 2$			;1 PLAYER MODE
	BIT PLAYER		;ATTRACT MODE?
	BMI 2$			;YES. ALWAYS USE WHITE
	LDA STRTER
	EOR I,B.PLY
	STA STRTER		;SWITCH PLAYERS
	ASL
	BPL 2$			;WHITE'S UP
	LDA I,4
	STA SAVEX
2$:	LDA SAVEX
	LDA Z,TEEY		;SET WHITE BALL ON TEE
	STA ZX,YPOS+1
	STA PNTRY		;SAVE A COPY FOR THE POINTER
	LDA Z,TEEX
	STA ZX,XPOS+1
	STA PNTRX
	LDA POLYL		;POINT BALL IN RANDOM DIRECTION
	STA DIRECT
	LDA SPOOL		;SHOTS LEFT?
	BEQ 1$			;NO. DON'T WORRY ABOUT IT THEN
	MSG WH,REM1		;WRITE SHOTS REMAINING
	BIT PLAYER		;ATTRACT MODE?
	BMI 1$			;YEP. NO MESSAGE RQD
	LDA STRTER
	AND I,B.TUNE		;BONUS?
	BNE 1$			;YEP. SKIP MSG
	JSR WCMSG		;WRITE COURSE MESSAGE
1$:	RTS
	
WCMSG:	MSG WH,CORSE		;WRITE 'COURSE'
	LDA HOLE		;TEST DATA => R0
	ADD <I,1>		;+1
	JSR CVD			;PRINT IT
	RTS
	.PAGE
	.SBTTL BALL MOTION
MOVE:	MOV R8,VEL		;COPY VELOCITY INTO R8
	LDA I,1			;START LOOP COUNT @ 1
	PHA
	TSX			;GET A COPY OF STACK POINTER
1$:	LDA R9			;GET MSB OF VEL
	BEQ 2$			;ITS OK
	LSR R9			;> OR =2
	ROR R8			;DIVIDE BY 2
	ASL ZX,1		;DOUBLE LOOP COUNT
	BNE 1$			;(ALWAYS)
2$:
7$:	CLR <HLCNST,HLCNST+1>
	SAVE DIRECT		;SAVE THIS
	JSR COLLIS		;RESET HLCNST IF NECESSARY
	RESTOR DIRECT		;RESTORE IT
3$:	LDX I,R10		;DELTA X GOES TO R10,R11
	LDY I,COSPOL
	LDA I,10		;(COSINE REQUEST)
	JSR CMPTXY		;COMPUTE DELTA X
	LDX I,R12		;DELTA Y GOES TO R12,R13
	LDY I,SINPOL
	LDA I,0
	JSR CMPTXY		;COMPUTE DELTA Y
6$:	LDX SAVEX		;RESTORE X
	SAVE <<ZX,XPOS+1>,<ZX,XPOS>,<ZX,YPOS+1>,<ZX,YPOS>,DIRECT>
	ADDM <ZX,XPOS>,R10		;APPLY DELTA X
	ADDM <ZX,YPOS>,R12	;APPLY DELTA Y
	JSR COLLIS		;SEE ABOUT COLLISIONS
	LDY I,0			;FOR SAFETY'S SAKE
	PLA			;GET OLD DIRECTION
	CMP DIRECT		;COLLISION?
	BEQ 4$			;NO. NO PROBLEM
	LDX SAVEX		;YES. JMP BACK TO OLD POSITION
	RESTOR <<ZX,YPOS>,<ZX,YPOS+1>,<ZX,XPOS>,<ZX,XPOS+1>>
	DEY			;SIGNAL CHANGE
	BMI 5$			;(ALWAYS)
4$:	PLA			;DISCARD OLD POSITION
	PLA
	PLA
	PLA
5$:	TSX
	DEC ZX,1		;COUNT
	BEQ 10$			;DONE.
	TYA			;WHAT HAPPENED?
	BPL 6$			;NOTHING
	BMI 3$			;COLLISION. CHANGE DIRECTION
10$:	PLA			;PURGE STACK
	RTS			;EXIT

APPACL:	LDA I,0
	STA R0
	LDA HLCNST		;GET DELTA A
	ASL
	BCC 3$			;ITS +
	DEC R0			;SIGN EXTEND
	CLC
3$:	ADC ANG			;APPLY DELTA A TO ANGLE
	STA ANG
	LDA R0
	ADC DIRECT
	AND I,3F		;ONLY TO 6 BITS
	STA DIRECT
	LDA I,0
	STA R0
	LDA HLCNST+1		;APPLY DELTA V TO VELOCITY
	BPL 2$
	DEC R0			;SIGN EXTEND
2$:	CLC
	ADC VEL
	STA VEL
	LDA R0
	ADC VEL+1
	STA VEL+1
	BPL 4$			;ITS OK
	LDA I,0			;ELSE NEGATE DIRECTION
	SEC
	SBC DIRECT
	AND I,3F		;ONLY TO 6 BITS
	STA DIRECT
4$:	LDA VEL
	SEC
	SBC ACCEL		;DECELERATE THE BALL TO DO FRICTION
	STA VEL
	LDA VEL+1
	SBC I,0
	STA VEL+1
8$:	CLC
	BMI 7$			;ERROR
	BNE 6$			;ITS OK
	LDA HLCNST+1		;ON A HILL?
	BEQ 5$
6$:	SEC
5$:	RTS
7$:	LDA HLCNST+1		;ON A HILL
	BEQ 5$			;NO.
	LDA VEL
	ADC ACCEL		;PUT IT BACK
	STA VEL
	LDA VEL+1
	ADC I,0
	STA VEL+1
	JMP 8$
	.PAGE
	.SBTTL MULTIPLY AND NEGATE
;
; AT ENTRY:
; X= ADDRESS OF PRODUCT
; Y= ADDRESS OF MULTIPLICAND
; A= MULTIPLIER

; AT EXIT:
; X,Y UNCHANGED
; A,R0,R1,R2 DESTROYED

MULT:	STA R2		;SAVE MULTIPLIER
	LDA I,0
	STA ZX,0	;CLEAR PRODUCT INITIALLY
	STA ZX,1	;(DOUBLE PRECISION OUTPUT)
	LDA AY,0	;COPY MULTIPLICAND TO R0,R1
	STA R0
	LDA AY,1
	STA R1
3$:	ASL R2		;PUT MULTPLIER BIT INTO CARRY
	BCS 1$		;THERE'S ONE THERE
	BNE 2$		;STILL SOMETHING IN A
	RTS		;DONE
1$:	CLC		;ACCUMULATE PRODUCT
	LDA R0
	ADC ZX,0
	STA ZX,0
	LDA R1
	ADC ZX,1
	STA ZX,1
2$:	LDA R1		;PROPAGATE SIGN BIT
	ASL
	ROR R1
	ROR R0		;WHILE HALVING MULTIPLICAND
	JMP 3$		;KEEP RUNNING

NEGATE:	SEC			;NEGATE DOUBLE BYTE VALUE AT (X)
	LDA I,0			;BY SUBTRACTING IT FROM 0
	SBC ZX,0
	STA ZX,0
	LDA I,0
	SBC ZX,1
	STA ZX,1
	CLC
	RTS
	.PAGE
	.SBTTL COMPUTE X,Y POSITIONS

; THIS ROUTINE COMPUTES NEW X AND Y POSITIONS OF BALL
; AT ENTRY:
; A = 10 FOR X POSITION, 0 FOR Y POSITION
; Y = COSPOL FOR X POSITION, SINPOL FOR Y POSITION
; X = ADDRESS OF REGISTER PAIR TO BE DESTINATION

; AT EXIT:
; A,Y,R0,R1,R2,R3,R4,R5,R6 DESTROYED
; (X)=R8*SIN[COS](DIRECT)
; X UNCHANGED

CMPTXY:	STY R4		;SAVE SINPOL [OR COSPOL]
	JSR SINCOS	;ACC = SIN(DIRECT) [COS(DIRECT)]; QUAD =>R3
	MULT ,R8	;(X)=VEL*SIN(DIRECT) [COS(DIRECT)
	LDY R3		;GET QUADRANT
	LDA R4		;GET POLARITY TABLE FOR SINE [COSINE]
1$:	LSR		;PUT QUADRANT POLARITY INTO CARRY
	DEY
	BPL 1$
	BCC 2$		;+
	JSR NEGATE	; (X)=-(X)
2$:	RTS		;DONE

SINPOL	=^B1100		;SINE + IN QUAD I,II; - IN III,IV
COSPOL	=^B0110		;COSINE + IN QUAD I,IV; - IN II,III

;SINE/COSINE LOOKUP ROUTINE
;AT ENTRY:
;ACC = 0 FOR SINE; 10 FOR COSINE (90 DEGREE PHASE SHIFT)
;AT EXIT:
; ACC= SIN(DIRECT) [COS(DIRECT)]
; R0 DESTROYED

SINCOS:	EOR DIRECT	;APPLY PHASE SHIFT
	STA R3		;KEEP RESULT
	STX R0		;SAVE X
	ASLS 4		;PUT 2^4 INTO CARRY
	LDA R3
	AND I,0F	;GET THE ANGLE BITS ARE NEEDED
	BCC 1$		;THEY ARE OK AS IS
	EOR I,0F	;NEGATE THEM TO 5 BITS
	ADC I,0		; (CARRY ALREADY SET)
1$:	TAX		;PREPARE FOR TABLE LOOKUP
	LDA DIRECT	;GET QUADRANT
	LSRS 4		;INTO 2 LSB'S
	STA R3		;PASS IT BACK
	LDA AX,SINE	;GET SINE/COSINE
	LDX R0		;RESTORE X
	RTS		;DONE

SINE:	.BYTE 000,00C,019,025,031,03C,047,051
	.BYTE 05A,063,06A,071,076,07A,07D,07F,080
	.PAGE
	.SBTTL RANDOM NUMBER STUFF
;
;RAND-RANDOM NUMBER GENERATOR
;
; (A)=RANDOM NUMBER
;
RAND:	ASL POLYL
	ROL POLYH
	BPL 1$
	INC POLYL
1$:	LDA POLYL		;CHANGE BIT 0 DEPENDING ON BIT 1
	AND I,2
	BEQ 2$
	LDA POLYL
	EOR I,1
	STA POLYL
2$:	LDA POLYH		;CHECK FOR ZERO
	ORA POLYL
	BNE 3$
	INC POLYL
3$:	RTS
	.PAGE
	.SBTTL COLLISION DETECTION
	.REPT 0
THIS ROUTINE DOES COLLISION DETECTION BETWEEN THE MOVING BALL
AND A PLAYFIELD STAMP. THERE ARE 28 DIFFERENT TYPES OF STAMPS
INTO WHICH THE BALL MAY COLLIDE.
	
THE PRE-REQUISITE TO THIS ROUTINE'S OPERTAION IS THAT THE BALL STEP
NO MORE THAN 1 LINE INTO THE STAMP PICTURE. THIS IS ACCOMPLISHED
ON THE FASTER VELOCITIES BY DIVIDING THE VELOCITY DOWN UNITL IT
IS EQUAL TO OR LESS THAN 1 AND THEN EXECUTING THIS ROUTINE
UNTIL THE EFFECTIVE VELOCITY IS ACHIEVED.
	
AT ENTRY:
 R8,R9=VELOCITY (ADJUSTED TO =< 1)

AT EXIT:
 A,X,Y,R0,R1,R2,R3,R4,R5,R6,R7 DESTROYED
 SREG=SOUND TO MAKE, HLCNST=HILL CONSTANTS

INTERNAL ASSIGNMENTS:
 R0,R1-PLYFLD ADDRESS OF STAMP TO TEST
 R2-X OFFSET
 R3-Y OFFSET
 R4- X+Y
 R5- X-Y

	.ENDR

OFFS	=R2

	.ENABL LSB
COLLIS:	LDX SAVEX		;GET PLAYER INDEX
	LDA ZX,OBJPIX		;BALL BLANK?
	BEQ NULL		;YEP. JUST EXIT
	JSR CPPLYA		;GET PLAYFIELD LOC OF BALL
	LDY I,21		;(STAMP 4)
2$:	LDA NY,R0		;GET STAMP BALL IS ON TOP OF
	BEQ NULL		;NO COLLISION
1$:	CMP I,98		;INVISIBLE BARRIER?
	BEQ NULL		;YEP.
	AND I,78
	BEQ 3$			;SPECIAL STAMP
	CMP I,20		;WATER?
	BNE 5$			;NOPE
JWTR:	JMP WATER
5$:	CMP I,60		;HILLS?
	BCS 6$			;YEP
	CMP I,8			;SAND?
	BNE 8$			;NOPE
	JMP SAND		;YEP
8$:	AND I,70
	CMP I,10		;BARRIER?
	BEQ BARTST		;YES
9$:	INY			;SKIP UP 1 STAMP
	CPY I,22		;(TO KEEP FROM GETTING LOCKED UP)
	BEQ 2$			;TRY AGAIN
	BNE JWTR		;TROUBLE. RESET
6$:	CMP I,68		;CONTOURS?
	BCS 9$			;NO
	LDA NY,R0		;GET STAMP DATA
	AND I,4			;GET POLARITY BIT (UP/DOWN)
	ASLS 3			;MAKE IT THE MSB OF DIRECTION
	JMP HILL		;EXECUTE HILL STUFF
3$:	LDA R2
	ADD R3
	STA R4			;X+Y
	LDA R2
	SUB R3
	STA R5			;X-Y
	LDA NY,R0		;GET STAMP
	ASL			;MAKE IT AN INDEX
	TAX
	LDA AX,SRVTBL+1		;GET SERVICE ROUTINE ADDRESS
	PHA
	LDA AX,SRVTBL
	PHA
NULL:	RTS			;GO TO SERVICE ROUTINE
	.DSABL LSB
		
	.MACRO SVC LAB		;SUBROUTINE CALL
	.WORD LAB-1
	.ENDM
	
SRVTBL:	SVC NULL
	SVC SOLID
	SVC WATER
	SVC AHOLE
	SVC DIAG0		;LOWER LEFT
	SVC DIAG1		;UPPER LEFT
	SVC DIAG2		;UPPER RIGHT
	SVC DIAG3		;LOWER RIGHT
	.GLOBL CPPLYA,SLDTST
CPPLYA:
	LDA ZX,XPOS+1		;COMPUTE X OFFSET
	SUB <I,10>		;ADJUST
	TAY			;SAVE IT FOR A SEC
	AND I,7
	STA R2			;SAVE X OFFSET
	TYA
	AND I,0F8
	ASL			;PUT '1' BIT INTO CARRY
	STA R0
	LDA I,PLYFLD/400	;INITIALIZE A
	ROL			;PUT THE BIT INTO A
	ASL R0			;PUT ANOTHER BIT INTO CARRY
	ROL			;AND THEN INTO A
	STA R1			;MSB OF PLYFLD ADDRESS
	LDA ZX,YPOS+1		;GET Y
	SBC I,0C		;COMPUTE Y
	TAY			;SAVE IT FOR A SEC
	AND I,7
	STA R3			;SAVE Y OFFSET
	TYA
	LSRS 3			;DIVIDE OUT OFFSET
	ORA R0			;MERGE INTO FINAL ADDRESS
	STA R0			;R0,R1 NOW POINTS TO LOWER LEFT STAMP
	RTS
	.PAGE
BARTST:	LDA NY,R0		;GET BARRIER #
	AND I,0F		;SOLID?
	BEQ SOLID		;YEP
	LDX SAVEX
	STA R4			;SAVE PIX #
	AND I,8			;UPPER?
	BNE 1$			;YES
	LDA R3			;GET Y OFFSET
	CMP R4			;MATCH PIX #?
	BCC NULL		;ITS A MISS
	BNE SOLID		;NOT ON THE EDGE
4$:	LDA I,0			;FOOL THE SOLID ROUTINE
	BEQ 3$			;(ALWAYS)
1$:	EOR R4			;DROP BIT AND GET PIX #
	CMP R3			;MATCH Y OFFSET?
	BCC NULL		;ITS A MISS
	BNE SOLID		;NOT ON THE EDGE
	LDA I,7			;FOOL THE SOLID ROUTINE
3$:	STA R3			;ADJUST Y OFFSET
;	BPL SOLID		;GO TO SOLID PROCESSOR (FALL THRU)
	.PAGE
	.ENABL LSB
SOLID:	LDA OFFS	;GET X OFFSET
	LDY I,0
	CMP I,1		;X < 1?(ON LEFT)?
	BCC 1$		;YES. SPECIAL CHECK REQUIRED
	INY
	CMP I,7		;X > 6? ON RIGHT
	BCC 1$		;NO.
	INY
1$:	LDX OFFS+1	;GET Y OFFSET
	CPX I,1		;Y < 1?
	BCC 9$		;YEP. SPECIAL CHECK REQUIRED
	INYS 4
	CPX I,7		;Y > 7?
	BCC 9$		;NO. SPECIAL CHECK REQUIRED
	INYS 4
9$:	JSR JND		;PUT PC ON STACK
JND:	TSX
	CLC
	LDA AY,SLDT.4	;GET OFFSET TO SERVICE ROUTINE
	ADC ZX,1	;COMPUTE ADDRESS
	STA ZX,1
	BCC 11$
	INC ZX,2
11$:	LDA DIRECT	;INITIALISE A
	RTS		;JMP @SLDT.4(Y)
WLL.C:	LDX AY,SLDT.5
	LDY AX,SLDT.0	;GET SQUARE # TO TEST
	JSR SLDTST	;IS IT A SOLID?
	BCC 5$		;NO.
	LDY AX,SLDT.0+1
	JSR SLDTST	;TEST THE OTHER SQUARE
	BCC 6$		;ITS A SPACE
	BCS BNCDIA	;BOUNCE OFF DIAGONAL
5$:	LDY AX,SLDT.0+1	;FIRST ONE'S A BLANK
	JSR SLDTST	;CHECK THE SECOND ONE
	BCS 8$		;ITS A SOLID. BOUNCE OFF A WALL
BNCDIA:	LDA DIRECT	;SPACES ON BOTH SIDES
	ADD <I,8>	;SKEW 45 DEG
	LSRS 2		;RHO IS THEN A
	AND I,0C	; FUNCTION OF CURRENT
	STA R4		; DIRECTION
	TXA		;  THEREFORE IT MUST BE COMPUTED
	LSR
	ORA R4
	TAX
	LDY AX,SLDT.2	;GET RHO FOR 'STUBS'
	BPL 3$		;RHO IS OK
	RTS		;RHO IS UNDEFINED
6$:	LDY AX,SLDT.0	;FIRST IS A SOLID,SECOND IS A SPACE
	INX		;REVERSE THE SENSE
8$:	TXA		;COMPUTE RHO INDEX FOR CORNERS
	STA R4		;KEEP LOW ORDER BIT
	LSRS 2		;GET HIGH ORDER BIT
	EOR R4
	LSR		;PUT BIT INTO CARRY
	BCS 2$		;BOUNCE HORIZ
	BCC 10$		;BOUNCE VERT
WLL.T:	CMP I,21	;TOP WALL
	BCS 2$		;>20. BOUNCE HORIZONTAL
WLL.X:	RTS
WLL.B:	BEQ WLL.X	;BOTTOM WALL.=0 NO GOOD
	CMP I,20
	BCS WLL.X	;>20 .NO GOOD
2$:	LDY I,0		;BOUNCE HORIZONTAL
3$:	JMP BNCE
WLL.L:	CMP I,10	;LEFT SIDE. <10?
	BCC 10$		;YES. BOUNCE OFF VERT VALL
	CMP I,31	;<30?
	BCC WLL.X	;YES. NO GOOD
10$:	LDY I,20	;BOUNCE OFF VERT WALL
	BNE 3$		;(ALWAYS)
WLL.R:	CMP I,11	;RIGHT WALL. >10?
	BCC WLL.X	;NO. NO GOOD
	CMP I,30	;< 30?
	BCC 10$		;YES. BOUNCE OFF VERT WALL
	BCS WLL.X	;NO GOOD
WLL.TR:	JMP WATER	;REAL BAD NEWS
	.DSABL LSB

SLDTST:	LDA NY,R0		;GET STAMP
	CMP I,1			;SOLID?
	BEQ 1$			;YES (C=1)
	AND I,-4
	CMP I,4			;DIAG?
	BEQ 2$			;YES (C=1)
	CMP I,98		;BLANK BARRIER?
	BEQ 3$			;YEP. N.F.G.
	AND I,0F0
	CMP I,90		;BARRIER?
	BEQ 1$			;YES
3$:	CLC			;NO BOUNCE ALLOWED
2$:	LDA I,80		;SET MINUS FLAG FOR DIAG ROUTINE
1$:	RTS

SLDT.0:	.BYTE 1,20,1,22,20,41,22,41
SLDT.1:	.BYTE 30,0,10,0,10,0,30,0
SLDT.2:	.BYTE 30,10,80,80
	.BYTE 30,80,10,80
	.BYTE 80,80,10,30
	.BYTE 80,10,80,30
SLDT.3:	.BYTE 6,30,7,10,5,10,4,30
	.MACRO SLDSVC LABL
	.IRP XYZ,<LABL>
	.BYTE WLL.'XYZ-JND
	.ENDR
	.ENDM
SLDT.4:	SLDSVC <C,B,C,TR,L,TR,R,TR,C,T,C,TR,TR,TR,TR,TR>	
SLDT.5:	.BYTE 0,0,4,0,0,0,0,0,2,0,6
	.PAGE
	.SBTTL COLLISION: DIAGONAL PROCESSOR

	.ENABL LSB
DIAG0:	LDA I,7
	CMP R4		;X+Y =< 7?
	BCS DIAGT	;YEP.
DIAEND:	RTS		;NO. IGNORE STAMP
DIAG1:	LDA R5		;X-Y =< 0?
	BMI DIAGT	;YES
	BEQ DIAGT	;YES
	RTS		;NO
DIAG2:	LDA R4
	CMP I,7		;X+Y >= 7?
	BCS DIAGT	;YEP
	RTS		;NO.
DIAG3:	LDA R5		;X-Y >= 0?
	BMI DIAEND	;NO
DIAGT:	CLV		;(SOMETHING TO ALWAYS BRANCH ON)
	LDA AX,OFSTBL-7	;CHECK OFFSETS (START WITH Y)
	BEQ 1$		;CHECKING AGAINST 7
	LSR		;DROP BIT
	CMP R3		;CHECK Y AGAINST 0
	BVC 2$		;(ALWAYS)
1$:	LDA R3
	CMP I,7
2$:	ROR R4		;SAVE RESULT OF TEST (CARRY)
	LDA AX,OFSTBL-8	;GET X TEST
	BEQ 3$		;CHECK AGAINST 7
	LSR		;DROP BIT
	CMP R2		;ELSE CHECK AGAINST 0
	BVC 4$		;(ALWAYS)
3$:	LDA R2
	CMP I,7
4$:	LDA R4		;GET PREVIOUS RESULT
	ROR		;PUT IN CURRENT RESULT
	AND I,0C0	;MASK TO ONLY THE RESULTS
	BNE 5$		;WE'RE ON AN EDGE
DI.CNV:	LDA AX,BNCVT-8
	TAX
	JMP BNCDIA
5$:	CMP I,0C0	;X & Y?
	BNE XORY	;NO. ITS X 'OR' Y
	JMP SOLID	;ITS X 'AND' Y
	.DSABL LSB
JBNCE:	JMP BNCE

XOYOT:	.BYTE 20,1,22,1,22,41,20,41

	.ENABL LSB
XORY:	ASL
	ROL R4		;SAVE THE X BIT
	TXA
	LDY I,30	;SET RHO=270
	LSRS 2		;STAMP # EVEN?
	BCC 1$		;YES
	LDY I,10	;ELSE SWITCH TO 90
1$:	LSR		;RANGE TEST 'AND'?
	BCS 2$		;NO. ITS 'OR'
	LDA DIRECT
	CMP AX,XYAND-8	;DO 'AND' RANGE TEST
	BCC 3$		;FAIL
	CMP AX,XYAND-7
	BCC BNCE	;PASS
	BEQ BNCE	;PASS
3$:	TXA		;FAIL
	LSR R4		;PUT X BIT INTO CARRY
	ADC I,0		;ADD IT TO ADDRESS
	TAX		;UPDATE THE INDEX
	STY R4		;SAVE CURRENT RHO FOR LATER
	LDY AX,XOYOT-8	;GET STAMP ADDRESS
	JSR SLDTST	;FIGURE THE TYPE
	BCS 4$		;ITS A SOLID OR DIAG
6$:	LDY I,20	;ITS A BLANK. SET RHO=180
	TXA
	LSR		;STAMP TYPE EVEN OR ODD?
	BCS BNCE	;EVEN
	LDY I,0		;ODD SO SET RHO=0
	BEQ BNCE	;(ALWAYS)
4$:	BMI 5$		;ITS A DIAGONAL
8$:	JMP DI.CNV
5$:	LDA NY,R0
	CMP AX,DIATST-8
	BNE 8$
	LDA R4		;GET ORIGINAL RHO
	EOR I,20	;MAKE A NEW ONE
DIAG:	TAY
BNCE:	TYA
	SUB DIRECT	;COMPUTE NEW DIRECTION
	AND I,3F	;TO 6 BITS
	STA DIRECT
	LDA #S.HIT	;BEEP OFF WALLS
	STA SREG
RSTSND:	LDA #0
	STA SNDCTL	;RESET SOUND GENERATOR
	RTS		;FINALLY DONE
2$:	LDA AX,XYAND-8
	CMP DIRECT
	BCS BNCE	;PASS
	LDA DIRECT
	CMP AX,XYAND-7	;'OR'
	BCS BNCE
	BCC 3$		;FAIL (ALWAYS)
	.DSABL LSB

OFSTBL:	.BYTE 1,1,1,0,0,0,0,1
XYAND:	.BYTE 18,38,08,28,18,38,08,28
BNCVT:	.BYTE 6,6,4,4,0,0,2,2
DIATST:	.BYTE 7,5,4,6,7,5,6,4
	.PAGE
	.SBTTL COLLISION: SPECIAL COLLISIONS
AHOLE:	LDA VEL+1
	CMP I,TOOFST		;GOING TOO FAST?
	BPL BV1			;YES. SKIP OVER HOLE
1$:	LDA PLAYER		;SINK THE PUTT
	BMI BV1			;IGNORE THE FOLLOWING IN ATTRACT MODE
	LDA I,10.
	STA FREEZE		;PAUSE
	LDA #S.HOLE		;BLOOOP....
	STA SREG
	LDA STRKW
	BIT STRTER		;WHICH SIDE UP?
	BVC 15$			;WHITE
	LDA STRKB
15$:	CMP I,1			;HOLE-IN-ONE?
	BNE 16$			;NO
	EMSG CORSE
	LDY I,20		;ERASE COURSE AND NUMBER
	STA NY,R2
	LDY I,40
	STA NY,R2
	LDA STRTER		;YES, PLAY FAN FARE
	ORA I,B.TUNE
	STA STRTER
	LDA #S.FANF
	STA SREG	;DO THE FANFARE
	INC SPOOL	;GIVE 'IM A BONUS
16$:	LDA I,B.DROP!B.SLOK
BCHG:	ORA PLAYER
	AND I,B.MSG!B.DROP!B.SLOK
	STA Z,PLAYER
	LDA STRTER
	ORA I,B.STOP		;PREPARE TO CHANGE STATES
	STA STRTER
BVNSH:	LDX SAVEX
	LDA I,BLANK
	STA ZX,OBJPIX		;BLANK THE BALL
TOCONT:
BV1:	RTS			;DONE

WATER:	LDA I,B.BMOV
	BIT PLAYER		;STOP THE BALL
	BEQ BV1			;ITS JUST THE POINTER
	BMI BVNSH		;IGNORE WATER IN ATTRACT
	LDA #S.H2O	;SPLASH....
	STA SREG
	LDA I,6
	STA FREEZE		;PAUSE
BV0:	LDA I,B.SLOK
	BNE BCHG		;(ALWAYS)
;
SAND:	LDA ACCEL
	ORA I,SANDA	;PUT IN SAND DECELERATION
	STA ACCEL
	LDA #S.SAND	;SCRAPE....
	STA SREG
	JMP RSTSND

;
CKTAB:	.BYTE 0,1,2,20,21,22,40,41,42

CHKS2K:	.BYTE 55		;SPOT FOR CHECKSUM


HILL:	STA R4
	LDA DIRECT	;GET ANGLE
	AND I,0F	;(1 OF 16)
	ASL		;*2
	TAY		;USE AS INDEX
	LDA DIRECT	;GET ANGLE
	EOR R4		;APPLY POLARITY AS REQUESTED
	ASLS 2		;PUT DELTA A POLARITY TO OVF
	STA R4		;AND SAVE DELTA V POLARITY
	BIT R4
	BVC 3$		;DELTA A +
	TYA		;ELSE NEGATE IT TO 5 BITS
	EOR I,1E	;(ACTUALLY TO 6 BITS CAUSE ITS *2)
	TAY
	INYS 2
3$:	LDA AY,HILTBL	;GET DELTA A
	BIT R4		;LOOK FOR DIRECT=00,30
	BVC 4$		;COULD BE 00,20
	BPL 1$		;ITS A 10 LEAVE IT +
	BVS 5$		;(ALWAYS) MAKE IT--
4$:	BMI 1$		;ITA A 20. LEAVE IT +
5$:	EOR I,0FF	;NEGATE
	CLC
	ADC I,1
1$:	STA HLCNST	;KEEP DELTA A
	LDA AY,HILTBL+1	;GET DELTA V
	BIT R4		;TEST DELAT V
	BMI 2$		;LEAVE IT +
	CLC
	EOR I,-1	;-
	ADC I,1		;(2'S COMPLIMENT)
2$:	STA HLCNST+1
	RTS			;DONE

HILTBL:	.BYTE 41,2,3D,7,3B,0B,39,10
	.BYTE 37,14,34,18,2F,1E,2D,20
	.BYTE 29,23,25,26,20,2A,1B,2B
	.BYTE 15,2C,0F,2E,0A,2F,05,30,00,30
	.PAGE
	.PAGE
	.SBTTL MESSAGE LINKAGES

	.GLOBL MSTA,WELL,MEDIUM,POOR,WHITE,BLACK,LOST
	.GLOBL GMEOVR,CORSE,CREDIT,ROMERR,ROMOK,SELFT,LANGM
	.GLOBL WRN1,WRN2,REM1,REM2,BONUS,PARR,RAMBAD

	.SBTTL INTERRUPT SERVICE
;
;IRQ SERICE (VBLANK)
;THIS ROUTINE UPDATES THE MOTION OBJECT
;POSITIONS AND SETS THE VBLANK FLAG.
;
IRQ:	PHA			;SAVE ACC
	TXA
	PHA
	TYA
	PHA
	CLD
	STA Z,IRQRST
	LDA Z,OPSWB
	AND I,08		;VBLANK?
	BNE 16$			;YEP
17$:	JMP IRQRET		;NOPE.
16$:	LDA I,B.VBLK		;SET VBLANK FLAG
	ORA Z,PLAYER
	STA Z,PLAYER
	INC Z,FRMCNT
	LDA FRMCNT
	AND I,3
	BNE 9$
	LDA FREEZE
	BEQ 9$
	DEC FREEZE
9$:	SAVE <R0,R1,R2,R3,R4>	;SAVE THESE BECAUSE 'MSG' USES THEM
	LDA I,B.WARN		;WARNING MODE?
	BIT PLAYER
	BEQ 50$			;NOPE.
	LDA FRMCNT
	AND I,7			;BLINK TIME?
	BNE 41$			;NO
	LDY I,WRN1		;PREPARE TO BLINK WARNING
	LDA FRMCNT
	AND I,8
	BEQ 51$			;ON
	EMSG			;OFF
	BEQ 1$			;(ALWAYS)
51$:	MSG WH			;ON
1$:	JMP N18			;(ALWAYS)
50$:	LDA FRMCNT
	LSR
	BCC 14$			;ODD FRAMES ONLY
	AND RANDOM		;FAST OR SLOW?
	LSR
	BCS 14$			;SLOW
	JSR BARIER
14$:	LDA Z,XPOS+1		;RESTORE MOTION OBJECT
	STA Z,PLAY1X		;POSITIONS
	STA Z,PLAY1X+2
	LDA Z,YPOS+1
	STA Z,PLAY1Y
	LDA Z,XPOS2+1		;PLAYER 2 PARAMETERS
	STA Z,PLAY2X
	STA Z,PLAY2X+2
	LDA Z,YPOS2+1
	STA Z,PLAY2Y
	LDA OBJPIX
	STA UPPER2
	LDA OBJPIX+1
	STA LOWER2
	LDA OBJPIX+4
	STA UPPER1
	LDA OBJPIX+5
	STA LOWER1
40$:	LDA FRMCNT
	AND I,7			;BLINK TIME?
	BEQ N14			;YEP
41$:	JMP N13			;NO. JUST EXIT
N14:	LDA FRMCNT
	AND I,8			;ISOLATE ON/OFF BIT
	ASLS 3			;PUT IT WHERE IT MAY BE TESTED
	STA R4			;KEEP IT (IN CASE WE DON'T XEQ MSG)
	LDY I,LOST		;PREPARE TO BLINK 'TOO LONG'
	LDA I,B.SQR
	BIT PLAYER		;ATTRACT MODE? SQUIRREL MOVING?
	BMI 15$			;ATTRACT MODE. DON'T CARE ABOUT SQUIRREL
	BNE 1$			;SQUIRREL MOVING. BLINK 'TOO LONG'
	LDY I,BONUS		;MAYBE BONUS BLINK
	LDA I,B.TUNE
	BIT STRTER		;BONUS?
	BEQ 30$			;NO
	BNE 1$			;YES
15$:	LDY I,GMEOVR		;START WITH GAME OVER
	LDA SPOOL		;ANY CREDIT?
	BEQ 1$			;NOPE. STICK WITH GAME OVER
	LDY I,CREDIT		;ELSE BLINK CREDIT
1$:	BIT R4			;ON?
	BVC 2$			;OFF
	MSG WH			;ON
	BEQ 30$			;(ALWAYS)
2$:	EMSG			;OFF
30$:	LDA LITES		;LOAD ATTRACTION LITES
	AND I,7F		;MASK OUT START BUTTON LITE
	STA LITES		;SAVE IT
	BIT R4			;RUN LITES?
	BVS 8$			;NO, LEAVE THEM ALONE
	LDA LITES
	CLC
	BNE 7$			;IS THERE A LIGHT ON?
	SEC			;NO, SO TURN ONE ON
7$:	ROL
	AND I,7F
	STA LITES
8$:	BIT PLAYER		;START SW LOCK OUT?
	BVS 10$			;YES. LAMP MUST ALWAYS BE ON
	LDA SPOOL		;ANY CREDITS?
	BEQ 11$			;NO. LAMP MUST ALWAYS BE OFF
	BIT R4			;YES. LAMP MUST BLINK. ON TIME?
	BVS 11$			;NO. KEEP IT OFF
10$:	LDA I,80			;YES. TURN IT ON
	ORA LITES
	STA LITES
11$:	LDA LITES
	STA LIGHTS		;ACTUALLY TURN THEM ON
	SAVE R4
	CLC
	NUMBER PLYFLD+224.+30.,WH,SCORE	;WHITE SCORE
	LDA STRTER
	AND I,B.BSTR		;BLACK STARTED?
	BEQ 3$			;NO. DON'T PRINT MSG
	CLC
	NUMBER PLYFLD+800.+30.,BK,SCORE2	;BLACK SCORE
3$:	MSG WH,PARR
	LDA PAR
	ASL
	STA R0
	LDA PAR
	ADC R0
	JSR CVD
	RESTOR R4
N18:	LDY I,REM1		;PREPARE TO BLINK 'SHOTS LEFT'
	LDA PLAYER
	ASL
	LDA I,B.TUNE
	BIT STRTER		;BONUS SEQUENCE?
	BNE 4$			;YES. BLINK SHOTS
	LDA SPOOL		;ANY CREDIT?
	BCC 3$			;NOT ATTRACT MODE. WRITE IT ANYWAY
	BEQ N13			;NO. NEVER MIND BLINKING
3$:	CMP I,6			;GETTING LOW?
	BCS 1$			;NO. ALWAYS WRITE IT
4$:	BIT R4			;YES. BLINK ON TIME?
	BVC 1$			;YES
	EMSG			;OFF.
	BEQ 2$			;(ALWAYS)
1$:	MSG WH			;WRITE IT
2$:	LDA SPOOL		;GET CREDIT COUNT
	CLC
	JSR CVD			;WRITE NUMBER
N13:	RESTOR <R4,R3,R2,R1,R0>	;RESTORE REGS
IRQRET:
	INC SNDCTL+2
	LDA SNDCTL+2		;DO SOUNDS ONLY EVERY OTHER INTERRUPT
	LSR
	BCS 3$
	JSR SOUND
3$:	JSR MOOLAH		;DO COIN STUFF
	BCS 1$
	STA COINOF		;COIN COUNTER OFF
	BCC 2$			;(ALWAYS)
1$:	STA COINON		;COIN COUNTER ON
	LDY #0
	LDA #0F8		;FOOL THE SOUND ROUTINE
	JSR SSOUND		;INTO MAKING A BUNCH OF BEEPS
2$:	JSR RAND		;DO RANDOM NUMBER ROUTINE
	PLA
	TAY	
	PLA
	TAX
	PLA
	RTI
CHKS3K:	.BYTE 55

;	THE FOLLOWING CODE DETERMINES THE LINK ORDER.
;	BY DOING IT THIS WAY IT DOES'NT MATTER WHAT ORDER THE
;	FILES ARE ENTERED TO THE LINKER. THIS ORDER ALWAYS TAKES
;	PRECEDENCE. (NOTE: THESE CSECTS ARE OVERLAYED WITH THE
;	DATA FROM THE EXTERNAL OBJECT MODULES. IT IS NOT ADVISABLE
;	TO SUPPLY CODE IN THESE CSECTS.
;
	.GLOBL SOUND,SSOUND
	.CSECT ASCII		;MESSAGES GO HERE
	.CSECT COLLIS		;FOLLOWED BY BARRIER STUFF
	.CSECT CORSES		;THE COURSES (HOLES)
	.CSECT GFCORS		;THE COURSE WRITER
	.CSECT GFCOIN		;THE COIN ROUTINE
	.CSECT GFSND		;SOUND GENERATOR
	.CSECT GFWPLY		;THE MESSAGE WRITER
	.CSECT GFST		;THE SELF-TEST ROUTINE

	.END 
                                                                                                                                                                                                                                                                                                                              