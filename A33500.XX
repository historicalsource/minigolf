	.TITLE GFST GOLF SELF TEST STUFF
	.SBTTL RAM ALLOCATIONS
;
;RAM ALLOCATIONS
;
	.ASECT
	.RADIX 16
	.=20
VIDCON:	.BLKB 1			;COINCIDENCE READ
	.=24
SOUNDS:	.BLKB 1
	.=40
OPSWA:  .BLKB 1			;8 BITS OPTION SWITCH
				;D7-COIN OPTION 1
				;D6-COIN OPTION 0
				;D5-LANGUAGE OPTION 1
				;D4-LANGUAGE OPTION 0
				;D3-(SPARE)
				;D2-(SPARE) 1/2 BONUS STROKES
SHOTS	=2			;D1-1/2 BONUS STROKES
B.ATSD	=1			;D0-ATTRACT MODE SOUNDS

OPSWB:	.BLKB 1
				;D7=COLLISION-BLK BALL/PLYFLD
				;D6=     "   -WHT BALL/PLYFLD
				;D5=     "   -BLK BALL/WHT BALL
				;D4=(SPARE)
				;D3=V-BLANK
				;D2=(SPARE)
				;D1=STEERING A
				;D0=STEERING B
LIGHTS: .BLKB 2
WATCH:	.BLKB 2
IRQRST:	.BLKB 1

	.=60
$COINA:
$LAM:
$CMODE:
COINDR: .BLKB 1		;COIN DOOR
				;D7=RIGHT COIN MECH
				;D6=LEFT COIN MECH
B.SLAM	=20			;D5=SLAM SWITCH
B.TST	=10			;D4=TEST MODE SWITCH
				;D3-D0=N.A.
CONTRL:	.BLKB 1			;CONTROL INPUTS
B.STRT	=80			;D7=START SWITCH
B.PG2	=40			;D6=PLUNGER SENSOR 2
B.PG1	=20			;D5=PLUNGER SENSOR 1
B.NEXT  =10			;D4=MOVE TO NEXT HOLE BUTTON
				;D3=SPARE
				;D2=SPARE
				;D1=(SPARE)
				;D0=(SPARE)
SKIP3:	.BLKB 2
DIAGN:	.BLKB 1
	.=068
NOISE:	.BLKB 2		; NOISE ENABLE
SNDDSB:	.BLKB 2		;SOUND ENABLE
	.BLKB 2
	.BLKB 2
	.=080
ZPAGE:
	.IRP Z,<0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15>
	.LIST
R'Z:	.BLKB
	.NLIST
	.ENDR

; MOVING OBJECT CONTROLS

PLAY2Y:	.BLKB 2		;BLACK BALL
PLAY1Y:	.BLKB 6		;WHITE BALL
PLAY2X: .BLKB 1
UPPER1:	.BLKB 1
SKIP1:	.BLKB 1
LOWER1:	.BLKB 1
PLAY1X:	.BLKB 1
UPPER2:	.BLKB 1
SKIP2:	.BLKB 1
LOWER2:	.BLKB 1

; WORKING MEMORY

;****
;DO NOT MOVE OR CHANGE THE ORDER OF THE
;FOLLOWING!!!
PLAY1:
XPOS:	.BLKB 2
XPARAM:
YPOS:	.BLKB 2
PLAY2:
XPOS2:	.BLKB 2
YPOS2:	.BLKB 2
ACCEL:	.BLKB
PNTRX:	.BLKB
SAVEX:	.BLKB
PNTRY:	.BLKB
OBJPIX:	.BLKB 2		;UPPER/LOWER PIX SELECT WHITE
HLCNST:	.BLKB 2
OBJ2PX:	.BLKB 2		;UPPER/LOWER PIX SELECT BLACK
;*END OF 'NOT NOT MOVE' ***
VEL:	.BLKB 2		;VELOCITY VECTOR
SQRLX:	.BLKB
SQRLY:	.BLKB
OLDBX:	.BLKB
OLDBPX:	.BLKB
ANG:	.BLKB 2
DIRECT	=ANG+1
DIR:	.BLKB 1
FRAME:	.BLKB 1
PLUNG:	.BLKB 2
ATRSEQ:	.BLKB 1		;ATTRACT MODE SEQUENCER
TEEY:	.BLKB 1
TEEX:	.BLKB 1
BARRL:	.BLKB 1		;LSB OF MOVING BARRIER
BARRH:	.BLKB 1		;MSB OF MOVING BARRIER
STRKW:  .BLKB 1		;STROKE COUNTERS
STRKB:	.BLKB 1
LITES:	.BLKB 1		;ATTRACTION LIGHT RING COUNTER
NONVOL:		;NON-VOLITILE STORAGE
SCORE:	.BLKB 1		;WHITE PLAYER
SCORE2:	.BLKB 1		;BLACK PLAYER
PLAYER:	.BLKB 1		;MASTER CONTROL
STRTER: .BLKB 1		;GAME START CONTROL
LNG:	.BLKB 2		;LANGUAGE SELECT
$CCTIM:	.BLKB 1		;TIMER FOR ELECTRO-MECHANICAL COUNTER
$PSTSL:	.BLKB 2
$INTCT: .BLKB 1
$LMTIM:	.BLKB 1
$CNCT:	.BLKB 1
$CNSTT:	.BLKB 2
SPOOL:	.BLKB 1		;SHOT POOL
FRMCNT:	.BLKB 1
DBOUNC: .BLKB 1		;SWITCH DEBOUNCE COUNTER
HOLE:	.BLKB 1		;CURRENT HOLE #
PAR:	.BLKB 1		;ACCUM PAR VALUE
FREEZE:	.BLKB 1		;SHORT TIMER
RANDOM: .BLKB 1
POLYL:	.BLKB 1		;RANDOM NUMBER
POLYH:	.BLKB 1
SREG:	.BLKB
SNDCTL:	.BLKB 4
ENDZPG:
	.GLOBL NMI		;NMI ADDRESS
	.GLOBL IRQ		;IRQ ADDRESS
	.GLOBL PWRON,CLEAR	;POWER-ON RESET ADDRESS
	.GLOBL DSPLY,CLRSCN,CHKS7K

	.IRPC X,<01234567>
	.GLOBL CHKS'X'K
	.ENDR
	.SBTTL MACROS

	.MACRO MSG COLOR,OP
	.IIF EQ, COLOR-1,SEC
	.IIF EQ, COLOR-2,CLC
	.IIF NB,<OP>,LDY I,OP
	JSR MSG
	.ENDM

	.MACRO EMSG OP
	.IIF NB,<OP>,LDY I,OP
	JSR EMSG
	.ENDM

	.MACRO NUMBER	DEST,COLOR,OP
	.IF NB <DEST>
	LDA I,DEST&0FF
	STA R2
	LDA I,DEST&-100/100
	STA R3
	.ENDC
	.IF NB,COLOR
	.IIF EQ,COLOR-1,LDA I,80
	.IIF EQ,COLOR-2,LDA I,0
	STA R4
	.ENDC
	LDA OP
	JSR CVD
	.ENDM

	.MACRO MULT	P,M,ML
	.IIF NB,<P>,LDX I,P	;PRODUCT @
	.IIF NB,<M>,LDY I,M	;MULTIPLICAND @
	.IIF NB,<ML>,LDA ML	;MULTIPLIER 
	JSR MULT
	.ENDM

	.MACRO GENS OPCODE
	.IRP	X,<OPCODE>
	.MACRO X'S COUNT,LABEL
	.REPT COUNT
	X	LABEL
	.ENDR
	.ENDM X'S
	.ENDR
	.ENDM GENS

	GENS <ASL,LSR,ROL,ROR,DEX,DEY,INX,INY,INC,DEC>

	.MACRO SAVE OP
	.IRP X,<OP>
	LDA X
	PHA
	.ENDR
	.ENDM

	.MACRO RESTOR OP
	.IRP X,<OP>
	PLA
	STA X
	.ENDR
	.ENDM
	
	.MACRO CLR OP
	 LDA I,0
	.IRP X,<OP>
	STA X
	.ENDR
	.ENDM
		
	.MACRO MOVB D,S
	LDA S
	STA D
	.ENDM
	
	.MACRO MOV D,S
	LDA S
	STA D
	LDA S+1
	STA D+1
	.ENDM
	
	.MACRO ADD OP
	CLC
	ADC OP
	.ENDM
	
	.MACRO ADDM D,S1,S2,C
	.IIF B,<C>,CLC
	LDA S1
	.IF B,<S2>
	ADC D
	.IFF
	ADC S2
	.IFTF
	STA D
	LDA S1+1
	.IFT
	ADC D+1
	.IFF
	ADC S2+1
	.ENDC
	STA D+1
	.ENDM

	.MACRO SUB OP
	SEC
	SBC OP
	.ENDM

	.MACRO SUBM D,S1,S2,C
	.IIF B,<C>,SEC
	.IF NB,<S2>
	LDA S1
	SBC S2
	.IFF
	LDA D
	SBC S1
	.IFTF
	STA D
	.IFT
	LDA S1+1
	SBC S2+1
	.IFF
	LDA D+1
	SBC S1+1
	.ENDC
	STA D+1
	.ENDM

	.LIST MEB
	.NLIST BYT
	.ENABL AMA
	.PAGE
	.SBTTL CONSTANTS
;
;CONSTANT ASSIGNMENTS
;
DISPLL	=00		;ADDRESS OF DISPLAY RAM
DISPLH	=08	
PLYFLD	=0800			;DISPLAY RAM ADDRESS
MAXFOR  =0D
BLANK	=00		;CODE FOR BLANKED BALL
$LMBIT	=20		;SLAM SWITCH POSITION
NMIDIS	=60		;NMI DISABLE
NMIEN	=61		;NMI ENABLE
SNDSON	=6A		;SOUNDS ON
SNDSOF	=6B		;SOUNDS OFF
COINOF	=6C
COINON	=6D
WH	=1
BK	=2
OFFST	=PLAY2-PLAY1	;OFFSET TO SECOND PLAYER'S PARAMETERS
;
;SOUNDS
;
HITSD	=74
HOLESD	=10
SQRSD	=0FA
H2OSD	=08
CLOKSD	=08
SANDSD	=0FF
UPSD	=08
DWNSD	=08
COINSD  =08
ATRSD	=08		;ATTRACT MODE SOUND
CLUBSD	=76		;CLUB HITS BALL
;
CNTBLK =XPARAM-PLAY1
;
;CONTROL WORD "PLAYER"
;
B.ATR	=80		;ATTRACT MODE
B.SLOK  =40		;START LOCK OUT
B.MSG	=20		;WARNING GIVEN
B.WARN	=10		;SHOTS LOW WARNING
B.VBLK	=08		;V-BLANKING
B.BMOV	=04		;BALL IN MOITION
B.SQR	=02		;SHOT TIMER
B.DROP	=01		;HOLE SUNK
;
MINDCL  =0C		;MINIMUM DECELERATION
MAXSTK  =06		;MAXIMUM NUMBER OF STROKES
TOOFST	=5		;TOO FAST TO FALL IN CUP
SANDA	=MINDCL*3	;SAND DECELERATION
PRGSPC  =2000		;ROM IS AT 2000-3FFF
;
;CONTROL WORD "STRTER"
;
B.STOP  =80		;BALL STOPPED
B.PLY	=40		;PLAYER SELECT
B.WHDN	=20		;WHITE DONE
B.BSTR	=10		;BLACK STARTED (2 PLAYER)
B.BKDN	=08		;BLACK DONE
B.TUNE	=04		;PLAY TUNE
	.CSECT GFST

	.GLOBL MSG,EMSG,CVD,MSTA
	.PAGE
CLEAR:	LDA I,0
	LDX I,NONVOL-ZPAGE-1
3$:	STA ZX,ZPAGE
	DEX
	BPL 3$
	LDA OPSWA	;GET FORIEGN LANGUAGE OPTIONS
	LSRS 3		;(COMES IN BITS 4 AND 5)
	AND I,6		;ONLY 4 ALLOWED
	SEI		;MSG IS CALLED IN VBLANK.
	TAX
	LDA AX,MSTA
	STA LNG
	LDA AX,MSTA+1
	STA LNG+1
	STA IRQRST
CLRSCN:	LDA I,PLYFLD+768.&-100/100
	STA Z,R1
	LDA I,0
	STA Z,R0
	LDX I,3
	LDY I,127.
1$:	STA NY,R0
	DEY
	BNE 1$
	DEC R1
	DEX
	BPL 1$
	STA A,PLYFLD+300	;HE MISSES THIS ONE
DSPLY:	RTS
	.PAGE
	.SBTTL POWER ON ENTRY

	.GLOBL WHITE,BLACK,ROMERR,ROMOK,SELFT,RAMBAD
	.GLOBL SPCOIN,LANGM,SETATR
PWRON:	STA Z,NMIDIS		;DISABLE NMI
	CLD
	SEI
	LDX I,0FF		;SET STACK POINTER
	TXS
	
	.SBTTL SELF-TEST: RAM CHECK
	
	INX			;SET X TO 0
	STA WATCH		;KICK THE WATCHDG
	TXA
1$:	STA AX,PLYFLD
	STA AX,PLYFLD+100
	STA AX,PLYFLD+200
	STA AX,PLYFLD+300	;(PAGE 0 TOO)
	DEX
	BNE 1$
	STA WATCH
	LDX I,ZPAGE		;PAGE 0 STARTS @ ZPAGE
5$:	LDA I,1			;PUT 1 IN ACC
4$:	STA ZX,0		;WRITE IT
	CMP ZX,0		;DID IT WORK?
	BEQ 2$			;YEP
8$:	LDX I,0
	LDY I,0
3$:	LDA AX,RAMBAD		;PUT UP RAM BAD MSG
	STA AY,PLYFLD+320.+16.
	BEQ .			;LET WATCHDOG TIME OUT
	INX
	TYA
	CLC
	ADC I,32.
	TAY
	BNE 3$			;ALWAYS
2$:	ASL
	BCC 4$			;CHECK EACH BIT IN EACH BYTE
	INX
	BNE 5$
	LDX I,ZPAGE		;NOW WRITE ADDRESS INTO PAGE 0
6$:	TXA
	STA ZX,0
	INX
	BNE 6$
	LDX I,ZPAGE		;SEE IF IT WORKED
7$:	TXA
	CMP ZX,0
	BNE 8$			;NOPE. WRITE ERROR MESSAGE
	INX
	BNE 7$
	STA WATCH		;THE PRE-CEEDING MAY HAVE TAKEN A WHILE
	.PAGE
	.SBTTL SELF-TEST: ROM CHECK
	
;AT THIS POINT THE RAM IS ASSUMED TO BE GOOD. A CHECKSUM
;IS COMPUTED ACCROSS EACH 4 BIT NIBBLE OF EACH 1024 BYTE
;BLOCK. THE RESULTS OF THE TESTS ARE STORED IN R0 FOR
;THE LS NIBBLE AND R1 FOR THE MS NIBBLE.

ROMTST:	JSR CLEAR		;CLEAR EVERYTHING
	SEI
	TAY			;AND THE Y TO 0
	LDA I,PRGSPC&-100/100	;START AT BEGINNING OF ROM
	STA R3
4$:	LDX I,3			;4 PAGES PER K
	LDA I,55		;START CHK SUM AT NON-ZERO
1$:	EOR NY,R2		;PUT IN PROGAM DATA
	INY
	BNE 1$
	INC R3			;NEXT PAGE
	DEX
	BPL 1$			;(TAKES APPROX 1 FRAME)
	TAX			;KEEP RESULT FOR A SEC
	NOP			;ROOM FOR DEVELOPMENT
	CLC
	AND I,0F		;ERROR?
	BEQ 2$			;NO
	SEC			;YEP
2$:	ROR R0			;PASS ERROR FLAG FOR LSB'S
	TXA			;GET CHKSUM
	AND I,0F0		;ERROR?
	BEQ 3$			;NO
	SEC			;YEP
3$:	ROR R1			;PASS ERROR FLAG FOR MSB'S
	STA WATCH
	LDA R3	
	CMP I,40		;DONE?
	BCC 4$			;NOPE. DO IT AGAIN
	LDA R0			;ANY ERRORS?
	ORA R1
	BEQ SWTEST		;NOPE. OFF TO SWITCH TEST
	LDA I,PLYFLD+96.+20.&0FF
	STA R2
	LDA I,PLYFLD+96.+20.&-100/100
	STA R3
	LDX I,7
8$:	LDY I,0
	LDA I,'X
	LSR R1			;MSB ERROR?
	BCC 5$			;NO
	STA NY,R2		;PRINT X
5$:	INYS 2
	LSR R0			;LSB ERROR?
	BCC 6$			;NO
	STA NY,R2		;PRINT X
6$:	LDA R2
	CLC
	ADC I,96.
	STA R2
	BCC 7$
	INC R3
7$:	DEX
	BPL 8$
	MSG WH,ROMERR
	BEQ SWT0		;SKIP THE 'ROM OK' MSG
	.PAGE
	.SBTTL SELF-TEST: SWITCH CHECKS
SWTEST: MSG WH,ROMOK		;ROM OK
SWT0:	MSG WH,SELFT		;PUT UP SELF TEST STUFF
	LDA I,8
	STA R10			;OLD OPTIONS
	STA SNDSON		;MAKE SURE SOUNDS WORK
SWT1:	LDA I,0FF		;KEEP ALL THE LIGHTS ON
	STA LIGHTS
	MOVB R2,<I,128.+14.>
	MOVB R3,<I,PLYFLD/100>
	MOVB R4,<I,80>
	LDA OPSWA		;GET COINING OPTION
	AND I,0C0
	ASL
	ROLS 2
	TAX
	LDA AX,SPCOIN
	JSR CVD			;CONVERT COINING TO DECIMAL
	LDA OPSWA
	LSRS 3
	AND I,6
	STA R9
	CMP R10			;MATCH OLD?
	BEQ 1$			;YEP
	STA R10
	EMSG LANGM		;ERASE OLD
	LDX R10
	LDA AX,MSTA
	STA LNG
	LDA AX,MSTA+1
	STA LNG+1
	MSG WH,LANGM		;WRITE LANGUAGE OPTION
1$:	LDA CONTRL		;GET START/PLUNG2/PLUNG1/NXT HOLE
	EOR I,0F0		;START/NXT ARE - TRUE
	AND I,0F0		;ONLY THE UPPER BITS
	STA R0
	LDX #0E0		;SELECT BEEP
	STX SOUNDS
	STX SNDDSB		;TURN OFF SOUND
	STX NOISE		;AND NOISE
	LDA COINDR		;GET LEFT COIN/RIGHT COIN/SLAM/TEST
	EOR I,20		;SLAM IS - TRUE
	AND I,0E0		;IGNORE TEST SW
	ORA R0			;ANY SWITCH ON?
	BEQ 2$			;NOPE. PEACE AND QUIET
	STX SNDDSB+1		;TURN ON SOUND
2$:	STA WATCH		;KICK WATCHDOG
PLTST:			;PLUNGER TEST
	LDX I,'2+80		;WHITE '2'
	LDA CONTRL		;GET START/PLUNG2/PLUNG1/NXT/VBLNK/N.U./STR1/STR2
	ASLS 2			;PUT PLUNG2 INTO CARRY
	BCS 1$			;PLUNG2 IS ON
	LDX I,0			;ELSE ITS 0
1$:	STX A,PLYFLD+512.+12.
	LDX I,'1+80		;WHITE '1'
	ASL			;GET PLUNG2
	BCS 2$			;ITS ON
	LDX I,0
2$:	STX A,PLYFLD+480.+12.
	LDA OPSWB		;PUT STR1 INTO CARRY
	LSR
	LDX I,'B+80		;WHITE 'B'
	BCS 4$			;ITS ON
	LDX I,0
4$:	STX A,PLYFLD+416.+10.
	LSR			;PUT STR2 INTO CARRY
	LDX I,'A+80		;WHITE 'A'
	BCS 5$			;ITS ON
	LDX I,0
5$:	STX A,PLYFLD+384.+10.
	LDA COINDR
	AND I,B.TST		;TEST MODE?
	BNE 6$			;YEP. LOOP
	JMP SWT1
6$:	LDX I,ENDZPG-NONVOL-1	;NOPE. CLEAR OUT NON-VOL RAM
	LDA I,0
3$:	STA ZX,NONVOL
	DEX
	BPL 3$
	STA IRQRST		;ENABLE INTERUPTS
	CLI
	JMP SETATR		;GO TO MAIN LOOP
	.PAGE
NMI:	STA NMIDIS		;PREVENT NOISE
	PHA
	CLD
	LDA I,0
	STA Z,PLUNG
	LDA I,07
	STA Z,PLUNG+1
	LDA #20			;PLUNGER NOISE TEST
	BIT CONTRL		;MASK WITH PLUNGER BIT
	BNE 2$			;JUST NOISE ON NMI INPUT
	BVC 2$			;UNDERFLOW
	ASL			;SET B.PG2
1$:	BIT Z,CONTRL		;CHECK PLUNGER
	BEQ 4$			;STOP COUNTING NOW
	DEC Z,PLUNG
	BNE 1$
	DEC Z,PLUNG+1
	BNE 1$
2$:	LDA I,0
	STA Z,PLUNG+1		;SET ZERO VALUE
4$:	PLA
	RTI

	.BLKB 256.
	.VCTRS 3FF8,55,NMI,PWRON,IRQ
CHKS7K	=3FF8
	.END PWRON
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         